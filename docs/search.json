[{"path":"https://smorabit.github.io/scWGCNA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 scWGCNA authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"overview-and-prerequisites","dir":"Articles","previous_headings":"","what":"Overview and prerequisites","title":"scWGCNA Basics","text":"tutorial covers basics using scWGCNA perform co-expression network analysis single-cell data. , demonstrate scWGCNA using processed single-nucleus RNA-seq (snRNA-seq) dataset human cortical samples publication. dataset already fully processed using standard single-cell transcritpomics analysis pipeline Seurat Scanpy. like follow tutorial using dataset, first need satisfy following prerequisites: single-cell single-nucleus transcriptomics dataset Seurat format. Normalize gene expression matrix NormalizeData. Identify highly variable genes VariableFeatures. Scale normalized expression data ScaleData Perform dimensionality reduction RunPCA batch correction needed RunHarmony. Non-linear dimensionality reduction RunUMAP visualizations. Group cells clusters (FindNeighbors FindClusters). example running prerequisite data processing steps can found Seurat Guided Clustering Tutorial. Additionally, lot WGCNA-specific terminology acronyms, clarified table.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"load-the-dataset-and-required-libraries","dir":"Articles","previous_headings":"Overview and prerequisites","what":"Load the dataset and required libraries","title":"scWGCNA Basics","text":"First load single-cell dataset required R libraries tutorial. plot non-linear dimensionality reduction (UMAP) colored cell type just check loaded data correctly, make sure grouped cells clusters cell types.","code":"# single-cell analysis package library(Seurat)  # plotting and data science packages library(tidyverse) library(cowplot) library(patchwork)  # co-expression network analysis packages: library(WGCNA) library(scWGCNA)  # using the cowplot theme for ggplot theme_set(theme_cowplot())  # set random seed for reproducibility set.seed(12345)  # load the Zhou et al snRNA-seq dataset seurat_obj <- readRDS('data/Zhou_control.rds') p <- DimPlot(seurat_obj, group.by='cell_type', label=FALSE) +    umap_theme + ggtitle('Cell Type')  p"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"set-up-seurat-object-for-wgcna","dir":"Articles","previous_headings":"","what":"Set up Seurat object for WGCNA","title":"scWGCNA Basics","text":"running scWGCNA, first set Seurat object. information computed scWGCNA stored Seurat object’s @misc slot. single Seurat object can hold multiple scWGCNA experiments, example representing different cell types single-cell dataset. Notably, since consider scWGCNA downstream data analysis step, support subsetting Seurat object SetupForWGCNA run. set Seurat object using SetupForWGCNA function, specifying name scWGNCA experiment. function also selects genes used WGCNA. user can select genes using three different approaches using gene_select parameter: variable: use genes stored Seurat object’s VariableFeatures. fraction: use genes expressed certain fraction cells whole dataset group cells, specified group.. custom: use genes specified custom list. example, select genes expressed least 5% cells dataset, name scWGCNA experiment “tutorial”.","code":"seurat_obj <- SetupForWGCNA(   seurat_obj,   gene_select = \"fraction\", # the gene selection approach   fraction = 0.05, # fraction of cells that a gene needs to be expressed in order to be included   wgcna_name = \"tutorial\" # the name of the scWGCNA experiment )"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"construct-metacells","dir":"Articles","previous_headings":"","what":"Construct metacells","title":"scWGCNA Basics","text":"set Seurat object, first step scWGCNA pipeine construct metacells single-cell dataset. Briefly, metacells aggregates small groups similar cells originating biological sample origin. k-Nearest Neighbors (KNN) algorithm used identify groups similar cells aggregate, average expression computed, thus yielding metacell gene expression matrix. sparsity metacell expression matrix considerably reduced compared original expression matrix, therefore preferable use. originally motivated use metacells place original single cells correlation network approaches WGCNA sensitive data sparsity. Furthermore, single-cell epigenomic approaches, Cicero, employ similar metacell aggregation approach prior constructing co-accessibility networks. scWGCNA includes function MetacellsByGroups construct metacell expression matrices given single-cell dataset. function constructs new Seurat object stored internally scWGCNA experiment. group.parameter determines groups metacells constructed . want construct metacells cells came biological sample origin, critical pass information scWGCNA via group.parameter. Additionally, usually construct metacells cell type separately. Thus, example, grouping Sample cell_type achieve desired result. number cells aggregated k tuned based size input dataset, general lower number k can used small datasets. generally use k values 20 75. dataset used tutorial 40,039 cells, ranging 890 8,188 biological sample, used k=25. Warning: found metacell aggregation approach yield good results extremely underrepresented cell types. example, dataset, brain vascular cells (pericytes endothelial cells) least represented, excluded analysis. construct metacells normalize resulting expression matrix using following code:","code":"# construct metacells  in each group seurat_obj <- MetacellsByGroups(   seurat_obj = seurat_obj,   group.by = c(\"cell_type\", \"Sample\"), # specify the columns in seurat_obj@meta.data to group by   k = 25, # nearest-neighbors parameter   ident.group = 'cell_type' # set the Idents of the metacell seurat object )  # normalize metacell expression matrix: seurat_obj <- NormalizeMetacells(seurat_obj)"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"optional-process-the-metacell-seurat-object","dir":"Articles","previous_headings":"Construct metacells","what":"Optional: Process the Metacell Seurat Object","title":"scWGCNA Basics","text":"Since store Metacell expression information Seurat object, can run Seurat functions ? Absolutely! included function easily extract metacell seurat object. Additionally, included wrapper functions apply Seurat workflow metacell object within scWGCNA experiment. apply wrapper functions process metacell object visualize aggregated expression profiles two dimensions UMAP.","code":"metacell_obj <- GetMetacellObject(seurat_obj) # process metacell seurat object with wrapper functions seurat_obj <- NormalizeMetacells(seurat_obj) # already run above seurat_obj <- ScaleMetacells(seurat_obj) seurat_obj <- RunPCAMetacells(seurat_obj, features=VariableFeatures(seurat_obj)) seurat_obj <- RunHarmonyMetacells(seurat_obj, group.by.vars='Sample') seurat_obj <- RunUMAPMetacells(seurat_obj, reduction='harmony', dims=1:15)  p1 <- DimPlotMetacells(seurat_obj, group.by='cell_type') + umap_theme + ggtitle(\"Cell Type\") p2 <- DimPlotMetacells(seurat_obj, group.by='Sample') + umap_theme + ggtitle(\"Sample\")  p1 | p2"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"co-expression-network-analysis","dir":"Articles","previous_headings":"","what":"Co-expression network analysis","title":"scWGCNA Basics","text":"section discuss perform co-expression network analysis scWGNCA inhibitory neuron (INH) cells example dataset.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"transpose-the-expression-matrix","dir":"Articles","previous_headings":"Co-expression network analysis","what":"Transpose the expression matrix","title":"scWGCNA Basics","text":"Seurat objects stores gene expression matrices row gene column cell. However, WGCNA expects column gene, thus transpose expression matrix. Furthermore, analysis, want include inhibitory neurons, subset expression data prior constructing network. scWGCNA includes SetDatExpr function store transposed expression matrix given group cells used downstream network analysis. metacell expression matrix single-cell expression matrix can used WGCNA, default use_metacells=TRUE. function allows user specify slot take expression matrix , example user wanted apply SCTransform normalization instead NormalizeData. following code used store transposed metacell expression matrix INH cells Seurat object:","code":"seurat_obj <- SetDatExpr(   seurat_obj,   group.by='cell_type', # the metadata column containing the cell type info. This same column should have also been used in MetacellsByGroups   group_name = \"INH\", # the name of the group of interest in the group.by column   use_metacells=TRUE,   slot = 'data' )"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"select-soft-power-threshold","dir":"Articles","previous_headings":"Co-expression network analysis","what":"Select soft-power threshold","title":"scWGCNA Basics","text":"Next select “soft power threshold”. extremely important step scWGNCA pipleine (vanilla WGCNA). hood, WGCNA constructs correlation adjacency matrix beging inferring co-expression relationships. correlations raised power, assumed reduce amount noise present correlation matrix. Therefore, critical determine proper value soft power threshold. include function TestSoftPowers, perform parameter sweep different soft power thresholds. Essentially TestSoftPowers wrapper WGCNA function pickSoftThreshold. function helps us guide choice soft power threshold constructing co-expression network comparing. WGCNA, network ideally scale-free topology, therefore TestSoftPowers function models closely resembles scale-free graph different soft power thresholds. following code performs parameter sweep outputs summary figure.  general guidance WGCNA scWGCNA pick lowest soft power threshold Scale Free Topology Model Fit greater equal 0.8, case select soft power threshold 9. Notably, output table parameter sweep stored scWGCNA experiment can accessed using GetPowerTable function:","code":"# Test different soft powers: seurat_obj <- TestSoftPowers(   seurat_obj,   setDatExpr = FALSE, # set this to FALSE since we did this above   outfile=\"INH_softpowers.pdf\" # output a figure to this file ) power_table <- GetPowerTable(seurat_obj)"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"construct-co-expression-network","dir":"Articles","previous_headings":"Co-expression network analysis","what":"Construct co-expression network","title":"scWGCNA Basics","text":"now everything need construct co-expression network. use scWGCNA function ConstructNetwork, calls WGCNA function blockwiseConsensusModules hood. function quite parameters play advanced user, selected default parameters work well many single-cell datasets. parameters blockwiseConsensusModules can passed directly ConstructNetwork parameter names. following code construtcts co-expression network using soft power threshold selected : scWGCNA also includes function PlotDendrogram visualize WGCNA dendrogram, common visualization show different co-expression modules resulting network analysis. leaf dendrogram represents single gene, color bottom indicates co-expression module assignment.","code":"# construct co-expression network: seurat_obj <- ConstructNetwork(   seurat_obj, soft_power=9,   setDatExpr=FALSE ) PlotDendrogram(seurat_obj, main='INH scWGCNA Dendrogram')"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"module-eigengenes-and-intramodular-connectivity","dir":"Articles","previous_headings":"","what":"Module Eigengenes and Intramodular Connectivity","title":"scWGCNA Basics","text":"section cover compute module eigengenes single cells, compute intramodular connectivity gene.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"compute-harmonized-module-eigengenes","dir":"Articles","previous_headings":"Module Eigengenes and Intramodular Connectivity","what":"Compute harmonized module eigengenes","title":"scWGCNA Basics","text":"Module Eigengenes (MEs) commonly used metric summarize gene expression profile entire co-expression module. Briefly, module eigengenes computed performing principal component analysis (PCA) subset gene expression matrix comprising module. first PC PCA matrices MEs. Dimensionality reduction techniques hot topic single-cell genomics. well known technical artifacts can muddy analysis single-cell datasets, years many methods aim reduce effects artifacts. Therefore stands reason MEs subject technical artifacts well, scWGCNA seeks alleviate effects. scWGCNA includes function ModuleEigengenes compute MEs Seurat object using Seurat’s RunPCA function hood. Additionally, allow user apply Harmony batch correction MEs, yielding harmonized module eigengenes (hMEs). RunPCA step Seurat workflow, expression matrix must scaled ScaleData run ModuleEigengenes. stage, user may also wish regress certain technical factors, demonstrate . following code scales expression matrix WGCNA genes, performs module eigengene computation harmonizing Sample origin using group..vars parameter. matrices stored matrix row cell column module. matrix can extracted Seurat object using GetMEs function, retrieves hMEs default.","code":"# expression matrix for all the WGCNA genes: seurat_obj <- Seurat::ScaleData(  seurat_obj,  features = GetWGCNAGenes(seurat_obj),  vars.to.regress = c('n_genes_by_counts', 'pct_counts_mt') )  # compute all MEs in the full single-cell dataset seurat_obj <- ModuleEigengenes(  seurat_obj,  group.by.vars=\"Sample\" ) # harmonized module eigengenes: hMEs <- GetMEs(seurat_obj)  # module eigengenes: MEs <- GetMEs(seurat_obj, harmonized=FALSE)"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"compute-module-connectivity","dir":"Articles","previous_headings":"Module Eigengenes and Intramodular Connectivity","what":"Compute module connectivity","title":"scWGCNA Basics","text":"co-expression network analysis, often want focus “hub genes”, highly connected within module. Therefore wish determine intramodular connectivity, also known kME, gene. scWGCNA includes ModuleConnectivity compute kME values full single-cell dataset, rather metacell dataset.","code":"# compute intramodular connectivity: seurat_obj <- ModuleConnectivity(seurat_obj)"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"getting-the-module-assignment-table","dir":"Articles","previous_headings":"Module Eigengenes and Intramodular Connectivity","what":"Getting the module assignment table","title":"scWGCNA Basics","text":"scWGCNA allows easy access module assignment table using GetModules function. table consists three columns: gene_name stores gene’s symbol ID, module stores gene’s module assignment, color stores color mapping module, used many downstream plotting steps. ModuleConnectivity called scWGCNA experiment, table additional columns kME module. wraps critical analysis steps scWGCNA, remember save output.","code":"# get the module assignment table: modules <- GetModules(seurat_obj) saveRDS(seurat_obj, file='scWGCNA_object.rds')"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"optional-compute-hub-gene-signature-scores","dir":"Articles","previous_headings":"Module Eigengenes and Intramodular Connectivity > Getting the module assignment table","what":"Optional: compute hub gene signature scores","title":"scWGCNA Basics","text":"Gene scoring analysis popular method single-cell transcriptomics computing score overall signature set genes. Seurat implements gene scoring technique using AddModuleScore function, also alternative approaches UCell. scWGCNA includes function ModuleExprScore compute gene scores give number genes module, using either Seurat UCell algorithm.","code":"# compute gene scoring for the top 25 hub genes by kME for each module # with Seurat method seurat_obj <- ModuleExprScore(   seurat_obj,   n_genes = 25,   method='Seurat' )  # compute gene scoring for the top 25 hub genes by kME for each module # with UCell method library(UCell) seurat_obj <- ModuleExprScore(   seurat_obj,   n_genes = 25,   method='UCell' )"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"basic-visualization","dir":"Articles","previous_headings":"","what":"Basic Visualization","title":"scWGCNA Basics","text":"showcase basic visualization capabilities scWGCNA, demonstrate use Seurat’s built-plotting tools visualize scWGCNA results. Note separate tutorial visualization scWGCNA networks.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"module-feature-plots","dir":"Articles","previous_headings":"Basic Visualization","what":"Module Feature Plots","title":"scWGCNA Basics","text":"FeaturePlot commonly used Seurat visualization show feature interest directly dimensionality reduction. scWGCNA includes ModuleFeaturePlot function consruct FeaturePlots co-expression module colored module’s uniquely assigned color.  can also plot hub gene signature score using function:","code":"# make a featureplot of hMEs for each module plot_list <- ModuleFeaturePlot(   seurat_obj,   features='hMEs', # plot the hMEs   order=TRUE # order so the points with highest hMEs are on top )  # stitch together with patchwork wrap_plots(plot_list, ncol=6) # make a featureplot of hub scores for each module plot_list <- ModuleFeaturePlot(   seurat_obj,   features='scores', # plot the hub gene scores   order='shuffle' # order so cells are shuffled )  # stitch together with patchwork wrap_plots(plot_list, ncol=6)"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"module-correlations","dir":"Articles","previous_headings":"Basic Visualization","what":"Module Correlations","title":"scWGCNA Basics","text":"scWGCNA includes ModuleCorrelogram function visualize correlation module based hMEs, MEs, hub gene scores using R package corrplot.  scWGCNA includes ModuleCorrelogram function shown , note R rich ecosystem statistical analysis tools can leveraged understand relationship different modules, encourage users explore data beyond functions provide . example inspecting correlation structure hMEs using alternative approach, GGally:","code":"# plot module correlagram ModuleCorrelogram(seurat_obj) # use GGally to investigate 6 selected modules: GGally::ggpairs(GetMEs(seurat_obj)[,c(1:3,12:15)])"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"seurat-plotting-functions","dir":"Articles","previous_headings":"Basic Visualization","what":"Seurat plotting functions","title":"scWGCNA Basics","text":"base Seurat plotting functions also great visualizing scWGCNA outputs. demonstrate plotting hMEs using DotPlot VlnPlot. key using Seurat’s plotting functions visualize scWGCNA data add Seurat object’s @meta.data slot: Now can easily use Seurat’s DotPlot function:  another example use Seurat’s VlnPlot function:","code":"# add hMEs to Seurat meta-data: seurat_obj@meta.data <- cbind(   seurat_obj@meta.data,   GetMEs(seurat_obj, harmonized=TRUE) ) # modules to plot: selected_mods <- paste0('INH-M', c(4,5,7,8,9,10))  # plot with Seurat's DotPlot function p <- DotPlot(     seurat_obj,     features = selected_mods,     group.by = 'cell_type' )  # flip the x/y axes, rotate the axis labels, and change color scheme: p <- p +   coord_flip() +   RotatedAxis() +   scale_color_gradient2(high='red', mid='grey95', low='blue') +  # plot output p # Plot INH-M4 hME using Seurat VlnPlot function p <- VlnPlot(   seurat_obj,   features = 'INH-M4',   group.by = 'cell_type',   pt.size = 0 # don't show actual data points )  # add box-and-whisker plots on top: p <- p + geom_boxplot(width=.25, fill='white')  # change axis labels and remove legend: p <- p + xlab('') + ylab('hME') + NoLegend()  # plot output p"},{"path":"https://smorabit.github.io/scWGCNA/articles/basic_tutorial.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"scWGCNA Basics","text":"tutorial went core functions performing co-expression network analysis single-cell transcriptomics data. encourage explore tutorials downstream analysis scWGCNA results.","code":""},{"path":"https://smorabit.github.io/scWGCNA/articles/network_visualizations.html","id":"modulenetworkplot","dir":"Articles","previous_headings":"","what":"ModuleNetworkPlot","title":"Network Visualization","text":"demonstrate using ModuleNetworkPlot function visualize network underlying top 25 hub genes module. default, function creates new folder called “ModuleNetworks”, generates .pdf figure module. parameters can adjust function: can see one network plots looks like:  network, node represents gene, edge represents co-expression relationship two genes network. module network plots colored based color column scWGCNA module assignment table GetModules(seurat_obj). top 10 hub genes kME placed center plot, remaining 15 genes placed outer circle. Optionally, certain visualization parameters can changed plot: edge.alpha: determines opacity network edges vertex.size: determines size nodes vertex.label.cex: determines font size gene label","code":"ModuleNetworkPlot(seurat_obj)"},{"path":"https://smorabit.github.io/scWGCNA/articles/network_visualizations.html","id":"hubgenenetworkplot","dir":"Articles","previous_headings":"","what":"HubGeneNetworkPlot","title":"Network Visualization","text":"make network plot combining modules together using HubGeneNetworkPlot function. function takes top n hub genes specified user, randomly selected genes, constructs joint network using force-directed graph drawing algorithm. visual clarity, number edges network can downsampled using edge_prop parameter. following example, visualize top 3 hub genes 6 genes per module.  previous network plot, node represents gene edge represents co-expression relationship. network, color intramodular edges module’s color, intermodular edges gray. opacity edges network scaled strength co-expression relationship. Additional network layout settings can passed layout_with_fr function igraph. user can also specify return_graph = TRUE return igraph object plot using custom code.","code":"# hubgene network png(paste0('network_vis/test_hubgene_graph.png'), width=7, height=7, units='in', res=400) HubGeneNetworkPlot(   seurat_obj,   n_hubs = 3, n_other=5,   edge_prop = 0.75,   mods = 'all' ) dev.off() g <- HubGeneNetworkPlot(seurat_obj,  return_graph=TRUE)"},{"path":"https://smorabit.github.io/scWGCNA/articles/network_visualizations.html","id":"moduleumapplot","dir":"Articles","previous_headings":"","what":"ModuleUMAPPlot","title":"Network Visualization","text":"Previously visualized subset co-expression network emphasis hub genes. , use alternative approach visualize genes co-expression network simultaneously. UMAP suitable method visualizing high-dimensional data two dimensions. scWGCNA includes function RunModuleUMAP run UMAP algorithm scWGCNA topological overlap matrix (TOM). UMAP analysis, subset columns TOM contain top n hub genes kME module, specified user. Therefore, organization gene UMAP space dependent gene’s connectivity network’s hub genes. following code demonstrates using RunModuleUMAP function 10 hub genes per module: Next make simple visualization UMAP using ggplot2:  plot, point represents single gene. size dot scaled gene’s kME ’s assigned module. ggplot2 sufficient visualize genes module UMAP, visualizing underlying network. can use function ModuleUMAPPlot plot genes co-expression relationships.  plot similar one made ggplot2, showing co-expression network, labeling 2 hub genes module. visual clarity, downsample keep 20% edges network using edge_prop parameter. also allow user also return igraph object make custom plots perform downstream network analysis:","code":"seurat_obj <- RunModuleUMAP(   seurat_obj,   n_hubs = 10, # number of hub genes to include for the UMAP embedding   n_neighbors=15, # neighbors parameter for UMAP   min_dist=0.1 # min distance between points in UMAP space ) # get the hub gene UMAP table from the seurat object umap_df <- GetModuleUMAP(seurat_obj)  # plot with ggplot p <- ggplot(umap_df, aes(x=UMAP1, y=UMAP2)) +      geom_point(        color=umap_df$color, # color each point by WGCNA module        size=umap_df$kME*2 # size of each point based on intramodular connectivity      ) +      umap_theme()   png(paste0('network_vis/hubgene_umap.png'), width=6, height=6, units='in', res=200) p dev.off() png(paste0(fig_dir, 'hubgene_umap_igraph.png'), width=9, height=9, units='in', res=200) ModuleUMAPPlot(   seurat_obj,   edge.alpha=0.05,   sample_edges=TRUE,   label_hubs=2,   edge_prop=0.2 ) dev.off()  pdf(paste0(fig_dir, 'hubgene_umap_igraph.pdf'), width=9, height=9) ModuleUMAPPlot(   seurat_obj,   edge.alpha=0.15,   sample_edges=TRUE,   label_hubs=2,   edge_prop=0.2 ) dev.off() g <- ModuleUMAPPlot(seurat_obj,  return_graph=TRUE)"},{"path":"https://smorabit.github.io/scWGCNA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Samuel Morabito. Author, maintainer.","code":""},{"path":"https://smorabit.github.io/scWGCNA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morabito S, Miyoshi E, Michael N, Shahin S, Martini AC, Head E, Silva J, Leavy K, Perez-Rosendahl M, Swarup V (2021). “Single-nucleus chromatin accessibility transcriptomic characterization Alzheimer’s disease.” Nature Genetics, 53, 1143–1155. https://doi.org/10.1038/s41588-021-00894-z.","code":"@Article{,   title = {Single-nucleus chromatin accessibility and transcriptomic characterization of Alzheimer’s disease},   author = {Samuel Morabito and Emily Miyoshi and Neethu Michael and Saba Shahin and Alessandra Cadete Martini and Elizabeth Head and Justine Silva and Kelsey Leavy and Mari Perez-Rosendahl and Vivek Swarup},   journal = {Nature Genetics},   year = {2021},   volume = {53},   pages = {1143–1155},   url = {https://doi.org/10.1038/s41588-021-00894-z}, }"},{"path":"https://smorabit.github.io/scWGCNA/index.html","id":"scwgcna-","dir":"","previous_headings":"","what":"scWGCNA","title":"scWGCNA","text":"scWGCNA R package performing weighted gene co-expression network analysis (WGCNA) single-cell RNA-seq data. scWGCNA constructs co-expression networks cell-type-specific manner, identifies robust modules inerconnected genes, provides biological context modules. scWGCNA directly compatible Seurat objects, one ubiquitous formats single-cell data. Check scWGCNA basics tutorial get started.","code":""},{"path":"https://smorabit.github.io/scWGCNA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"scWGCNA","text":"recommend creating R conda environment environment scWGCNA. Next, open R install required dependencies: Bioconductor, R-based software ecosystem bioinformatics biostatistics. Seurat, general-purpose toolkit single-cell data science. WGCNA, package co-expression network analysis. igraph, package general network analysis visualization. devtools, package package development R. Now can install scWGCNA package using devtools. planning add scWGCNA CRAN Bioconductor upon 1.0 release next couple months.","code":"# create new conda environment for R conda create -n scWGCNA -c conda-forge r-base r-essentials  # activate conda environment conda activate scWGCNA # install BiocManager install.packages(\"BiocManager\")  # install Bioconductor core packages BiocManager::install()  # install additional packages: install.packages(c(\"Seurat\", \"WGCNA\", \"igraph\", \"devtools\")) devtools::install_github('smorabit/scWGCNA', branch='dev')"},{"path":"https://smorabit.github.io/scWGCNA/reference/AvgModuleExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"AverageModuleExpr — AvgModuleExpr","title":"AverageModuleExpr — AvgModuleExpr","text":"Computes module eigengenes WGCNA co-expression modules","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/AvgModuleExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AverageModuleExpr — AvgModuleExpr","text":"","code":"AvgModuleExpr(seurat_obj, n_genes = 25, wgcna_name = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/AvgModuleExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AverageModuleExpr — AvgModuleExpr","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/AvgModuleExpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AverageModuleExpr — AvgModuleExpr","text":"","code":"AverageModuleExpr (pbmc) #> Error in AverageModuleExpr(pbmc): could not find function \"AverageModuleExpr\""},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeModuleEigengene.html","id":null,"dir":"Reference","previous_headings":"","what":"ComputeModuleEigengene — ComputeModuleEigengene","title":"ComputeModuleEigengene — ComputeModuleEigengene","text":"Internal helper function computes module eigengene single module.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeModuleEigengene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComputeModuleEigengene — ComputeModuleEigengene","text":"","code":"ComputeModuleEigengene(   seurat_obj,   cur_mod,   modules,   group.by.vars = NULL,   verbose = TRUE,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeModuleEigengene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComputeModuleEigengene — ComputeModuleEigengene","text":"seurat_obj Seurat object cur_mod name module found seurat_obj@misc[seurat_obj@misc$active_wgcna]$wgcna_net$colors","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeModuleEigengene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComputeModuleEigengene — ComputeModuleEigengene","text":"","code":"ConstructNetwork(pbmc) #> Error in GetActiveWGCNA(seurat_obj): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeROC.html","id":null,"dir":"Reference","previous_headings":"","what":"ComputeROC — ComputeROC","title":"ComputeROC — ComputeROC","text":"ComputeROC","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComputeROC — ComputeROC","text":"","code":"ComputeROC(   seurat_obj,   group.by = NULL,   split_col = NULL,   features = \"hMEs\",   seurat_test = NULL,   harmony_group_vars = NULL,   scale_genes = TRUE,   verbose = FALSE,   exp_thresh = 0.75,   return_seurat = TRUE,   wgcna_name = NULL,   wgcna_name_test = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ComputeROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComputeROC — ComputeROC","text":"","code":"ComputeROC #> function (seurat_obj, group.by = NULL, split_col = NULL, features = \"hMEs\",  #>     seurat_test = NULL, harmony_group_vars = NULL, scale_genes = TRUE,  #>     verbose = FALSE, exp_thresh = 0.75, return_seurat = TRUE,  #>     wgcna_name = NULL, wgcna_name_test = NULL)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     if (is.null(group.by)) { #>         group.by <- \"roc_group\" #>         seurat_obj@meta.data[[group.by]] <- Idents(seurat_obj) #>     } #>     groups <- levels(seurat_obj@meta.data[[group.by]]) #>     groups <- groups[order(groups)] #>     if (is.null(seurat_test)) { #>         print(\"splitting seurat obj\") #>         seurat_train <- seurat_obj[, seurat_obj@meta.data[[split_col]]] #>         seurat_test <- seurat_obj[, !seurat_obj@meta.data[[split_col]]] #>         wgcna_name_train <- \"ROC\" #>         seurat_train <- ProjectModules(seurat_train, seurat_ref = seurat_obj,  #>             group.by.vars = harmony_group_vars, wgcna_name_proj = wgcna_name_train,  #>             scale_genes = scale_genes, verbose = verbose) #>     } #>     else { #>         if (is.null(wgcna_name_test)) { #>             wgcna_name_test <- seurat_test@misc$active_wgcna #>         } #>         if (is.null(group.by)) { #>             group.by <- \"roc_group\" #>             seurat_test@meta.data[[group.by]] <- Idents(seurat_test) #>         } #>         seurat_train <- seurat_obj #>         wgcna_name_train <- wgcna_name #>     } #>     groups_test <- levels(seurat_test@meta.data[[group.by]]) #>     groups_test <- groups_test[order(groups_test)] #>     groups_common <- intersect(groups, as.character(unique(seurat_test@meta.data[[group.by]]))) #>     if (sum(groups == groups_test) != length(groups)) { #>         stop(\"Different groups present in train & test data. Idents likely do not match.\") #>     } #>     if (is.null(GetModules(seurat_test, wgcna_name = wgcna_name_test))) { #>         wgcna_name_test <- \"ROC\" #>         seurat_test <- ProjectModules(seurat_test, seurat_ref = seurat_obj,  #>             group.by.vars = harmony_group_vars, wgcna_name_proj = wgcna_name_test,  #>             scale_genes = scale_genes, verbose = verbose) #>     } #>     if (features == \"hMEs\") { #>         MEs <- GetMEs(seurat_train, TRUE, wgcna_name_train) #>         MEs_p <- GetMEs(seurat_test, TRUE, wgcna_name_test) #>     } #>     else if (features == \"MEs\") { #>         MEs <- GetMEs(seurat_train, FALSE, wgcna_name_train) #>         MEs_p <- GetMEs(seurat_test, FALSE, wgcna_name_test) #>     } #>     else if (features == \"scores\") { #>         MEs <- GetModuleScores(seurat_train, wgcna_name_train) #>         MEs_p <- GetModuleScores(seurat_test, wgcna_name_test) #>         stop(\"Haven't implemented this one yet >.<\") #>     } #>     else (stop(\"Invalid feature selection. Valid choices: hMEs, MEs, scores.\")) #>     MEs <- as.data.frame(MEs) %>% mutate(group = seurat_train@meta.data[[group.by]]) #>     MEs_p <- as.data.frame(MEs_p) %>% mutate(group = seurat_test@meta.data[[group.by]]) #>     MEs <- subset(MEs, group %in% groups_common) #>     MEs_p <- subset(MEs_p, group %in% groups_common) #>     avg_MEs <- MEs %>% group_by(group) %>% summarise(across(!!mods,  #>         mean)) #>     avg_MEs_p <- MEs_p %>% group_by(group) %>% summarise(across(!!mods,  #>         mean)) #>     groups <- avg_MEs$group #>     avg_MEs <- avg_MEs %>% summarise(across(!!mods, scale01)) #>     avg_MEs_p <- avg_MEs_p %>% summarise(across(!!mods, scale01)) #>     labels <- avg_MEs %>% purrr::map(~ifelse(. >= exp_thresh,  #>         TRUE, FALSE)) #>     labels <- as.data.frame(do.call(cbind, labels)) #>     rownames(labels) <- as.character(groups) #>     plot_df <- data.frame() #>     conf_df <- data.frame() #>     auc_list <- list() #>     mod_colors <- list() #>     roc_list <- list() #>     for (cur_mod in mods) { #>         print(cur_mod) #>         cur_color <- modules %>% subset(module == cur_mod) %>%  #>             .$color %>% unique #>         mod_colors[[cur_mod]] <- cur_color #>         rocobj <- pROC::roc(labels[, cur_mod], avg_MEs_p[[cur_mod]]) #>         auc_list[[cur_mod]] <- as.numeric(rocobj$auc) #>         roc_list[[cur_mod]] <- rocobj #>         cur_df <- data.frame(specificity = 1 - rocobj$specificities,  #>             sensitivity = rocobj$sensitivities, module = cur_mod,  #>             color = cur_color, auc = as.numeric(rocobj$auc)) #>         plot_df <- rbind(plot_df, cur_df) #>         cur_conf <- as.data.frame(pROC::ci.se(rocobj)) #>         cur_conf$sensitivity <- 1 - as.numeric(rownames(cur_conf)) #>         cur_conf$module <- cur_mod #>         cur_conf$color <- cur_color #>         conf_df <- rbind(conf_df, cur_conf) #>     } #>     colnames(conf_df)[1:3] <- c(\"lo\", \"mid\", \"hi\") #>     roc_info = list(roc = plot_df, conf = conf_df, objects = roc_list) #>     if (return_seurat) { #>         seurat_obj <- SetROCData(seurat_obj, roc_info, wgcna_name) #>         out <- seurat_obj #>     } #>     else { #>         out <- roc_info #>     } #>     out #> } #> <bytecode: 0x7fbd571997a8> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"ConstructMetacells — ConstructMetacells","title":"ConstructMetacells — ConstructMetacells","text":"function takes Seurat object constructs averaged 'metacells' based neighboring cells.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ConstructMetacells — ConstructMetacells","text":"","code":"ConstructMetacells(   seurat_obj,   name = \"agg\",   ident.group = \"seurat_clusters\",   k = 50,   reduction = \"umap\",   assay = \"RNA\",   cells.use = NULL,   slot = \"counts\",   meta = NULL,   return_metacell = FALSE,   wgcna_name = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConstructMetacells — ConstructMetacells","text":"seurat_obj Seurat object name string appended resulting metalcells. Default = 'agg' k Number nearest neighbors aggregate. Default = 50 reduction dimensionality reduction stored Seurat object. Default = 'umap' assay Assay extract data aggregation. Default = 'RNA' slot Slot extract data aggregation. Default = 'data' return_metacell Logical determine return metacell seurat object (TRUE), add misc original Seurat object (FALSE). Default FALSE.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ConstructMetacells — ConstructMetacells","text":"","code":"ConstructMetacells(pbmc) #> Error in ConstructMetacells(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"ConstructNetwork — ConstructNetwork","title":"ConstructNetwork — ConstructNetwork","text":"function constructs co-expression network Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ConstructNetwork — ConstructNetwork","text":"","code":"ConstructNetwork(   seurat_obj,   soft_power = NULL,   use_metacells = TRUE,   setDatExpr = TRUE,   group.by = NULL,   group_name = NULL,   consensus = FALSE,   multi.group.by = NULL,   multi_groups = NULL,   tom_outdir = \"TOM\",   blocks = NULL,   maxBlockSize = 30000,   randomSeed = 12345,   corType = \"pearson\",   consensusQuantile = 0.3,   networkType = \"signed\",   TOMType = \"unsigned\",   TOMDenom = \"min\",   scaleTOMs = TRUE,   scaleQuantile = 0.8,   sampleForScaling = TRUE,   sampleForScalingFactor = 1000,   useDiskCache = TRUE,   chunkSize = NULL,   deepSplit = 4,   pamStage = FALSE,   detectCutHeight = 0.995,   minModuleSize = 50,   mergeCutHeight = 0.2,   saveConsensusTOMs = TRUE,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ConstructNetwork — ConstructNetwork","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ConstructNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ConstructNetwork — ConstructNetwork","text":"","code":"ConstructNetwork(pbmc) #> Error in GetActiveWGCNA(seurat_obj): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/DimPlotMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"DimPlotMetacells — DimPlotMetacells","title":"DimPlotMetacells — DimPlotMetacells","text":"Wrapper function run Seurat's DimPlot function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/DimPlotMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DimPlotMetacells — DimPlotMetacells","text":"","code":"DimPlotMetacells(seurat_obj, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/DimPlotMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DimPlotMetacells — DimPlotMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/DimPlotMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DimPlotMetacells — DimPlotMetacells","text":"","code":"NormalizeMetadata #> Error in eval(expr, envir, enclos): object 'NormalizeMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/DoHubGeneHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots gene expression of hub genes as a heatmap — DoHubGeneHeatmap","title":"Plots gene expression of hub genes as a heatmap — DoHubGeneHeatmap","text":"function makes expression heatmap top n hub genes per module using Seurat's DoHeatmap, assembles one big heatmap.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/DoHubGeneHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots gene expression of hub genes as a heatmap — DoHubGeneHeatmap","text":"","code":"DoHubGeneHeatmap(   seurat_obj,   n_hubs = 10,   n_cells = 200,   group.by = NULL,   module_names = NULL,   combine = TRUE,   draw.lines = TRUE,   disp.min = -2.5,   disp.max = 2.5,   wgcna_name = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/DoHubGeneHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots gene expression of hub genes as a heatmap — DoHubGeneHeatmap","text":"seurat_obj Seurat object wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/DoHubGeneHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots gene expression of hub genes as a heatmap — DoHubGeneHeatmap","text":"","code":"DoHubGeneHeatmap #> function (seurat_obj, n_hubs = 10, n_cells = 200, group.by = NULL,  #>     module_names = NULL, combine = TRUE, draw.lines = TRUE, disp.min = -2.5,  #>     disp.max = 2.5, wgcna_name = NULL)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     if (is.null(group.by)) { #>         group.by <- \"temp_ident\" #>         seurat_obj$temp_ident <- Idents(seurat_obj) #>     } #>     seurat_obj@meta.data[[group.by]] <- droplevels(seurat_obj@meta.data[[group.by]]) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     modules <- modules %>% subset(module != \"grey\") %>% mutate(module = droplevels(module)) #>     mods <- levels(modules$module) #>     if (!is.null(module_names)) { #>         print(\"here\") #>         mods <- module_names #>         modules <- modules %>% subset(module %in% mods) #>     } #>     mod_colors <- modules %>% dplyr::select(c(module, color)) %>%  #>         distinct #>     hub_list <- lapply(mods, function(cur_mod) { #>         cur <- subset(modules, module == cur_mod) #>         cur <- cur[, c(\"gene_name\", paste0(\"kME_\", cur_mod))] %>%  #>             top_n(n_hubs) #>         colnames(cur)[2] <- \"var\" #>         cur %>% arrange(desc(var)) %>% .$gene_name #>     }) #>     names(hub_list) <- mods #>     print(hub_list) #>     seurat_obj$barcode <- colnames(seurat_obj) #>     temp <- table(seurat_obj@meta.data[[group.by]]) #>     df <- data.frame() #>     for (i in 1:length(temp)) { #>         if (temp[[i]] < n_cells) { #>             cur_df <- seurat_obj@meta.data %>% subset(get(group.by) ==  #>                 names(temp)[i]) #>         } #>         else { #>             cur_df <- seurat_obj@meta.data %>% subset(get(group.by) ==  #>                 names(temp)[i]) %>% sample_n(n_cells) #>         } #>         df <- rbind(df, cur_df) #>     } #>     seurat_plot <- seurat_obj %>% subset(barcode %in% df$barcode) #>     plot_list <- list() #>     for (i in 1:length(hub_list)) { #>         print(i) #>         cur_mod <- names(hub_list)[i] #>         print(i) #>         print(hub_list[[i]]) #>         print(i) #>         if (i == 1) { #>             plot_list[[i]] <- DoHeatmap(seurat_plot, features = hub_list[[i]],  #>                 group.by = group.by, raster = TRUE, slot = \"scale.data\",  #>                 disp.min = disp.min, disp.max = disp.max, label = FALSE,  #>                 group.bar = FALSE, draw.lines = draw.lines) #>         } #>         else { #>             plot_list[[i]] <- DoHeatmap(seurat_plot, features = hub_list[[i]],  #>                 group.by = group.by, raster = TRUE, slot = \"scale.data\",  #>                 group.bar.height = 0, label = FALSE, group.bar = FALSE,  #>                 draw.lines = draw.lines, disp.min = disp.min,  #>                 disp.max = disp.max) + NoLegend() #>         } #>         print(i) #>         plot_list[[i]] <- plot_list[[i]] + theme(plot.margin = margin(0,  #>             0, 0, 0), axis.text.y = element_text(face = \"italic\")) +  #>             scale_y_discrete(position = \"right\") #>         print(i) #>     } #>     n_total_cells <- ncol(seurat_plot) #>     width_cbar <- n_total_cells/50 #>     mod_colors$value <- n_hubs #>     mod_colors$dummy <- \"colorbar\" #>     cbar_list <- list() #>     for (i in 1:nrow(mod_colors)) { #>         cbar_list[[i]] <- mod_colors[i, ] %>% ggplot(aes(y = value,  #>             x = dummy)) + geom_bar(position = \"stack\", stat = \"identity\",  #>             fill = mod_colors[i, ]$color) + umap_theme + theme(plot.margin = margin(0,  #>             0, 0, 0)) #>     } #>     p_cbar <- wrap_plots(cbar_list, ncol = 1) #>     if (combine) { #>         out <- wrap_plots(plot_list, ncol = 1) + plot_layout(guides = \"collect\") #>         out <- (p_cbar | out) + plot_layout(widths = c(width_cbar,  #>             n_total_cells)) #>     } #>     else { #>         out <- plot_list #>     } #>     out #> } #> <bytecode: 0x7fbd5a4ee0f8> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrBarPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"EnrichrBarPlot — EnrichrBarPlot","title":"EnrichrBarPlot — EnrichrBarPlot","text":"Makes barplots Enrichr data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrBarPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EnrichrBarPlot — EnrichrBarPlot","text":"","code":"EnrichrBarPlot(   seurat_obj,   outdir = \"enrichr_plots\",   n_terms = 25,   plot_size = c(6, 15),   wgcna_name = NULL,   logscale = FALSE,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrBarPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EnrichrBarPlot — EnrichrBarPlot","text":"seurat_obj Seurat object wgcna_name name scWGCNA experiment seurat_obj@misc slot dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrBarPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EnrichrBarPlot — EnrichrBarPlot","text":"","code":"EnrichrBarPlot #> function (seurat_obj, outdir = \"enrichr_plots\", n_terms = 25,  #>     plot_size = c(6, 15), wgcna_name = NULL, logscale = FALSE,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     enrichr_df <- GetEnrichrTable(seurat_obj, wgcna_name) #>     wrapText <- function(x, len) { #>         sapply(x, function(y) paste(strwrap(y, len), collapse = \"\\n\"),  #>             USE.NAMES = FALSE) #>     } #>     if (!dir.exists(outdir)) { #>         dir.create(outdir) #>     } #>     for (i in 1:length(mods)) { #>         cur_mod <- mods[i] #>         cur_terms <- subset(enrichr_df, module == cur_mod) #>         print(cur_mod) #>         cur_color <- modules %>% subset(module == cur_mod) %>%  #>             .$color %>% unique %>% as.character #>         if (nrow(cur_terms) == 0) { #>             next #>         } #>         cur_terms$wrap <- wrapText(cur_terms$Term, 45) #>         plot_list <- list() #>         for (cur_db in dbs) { #>             plot_df <- subset(cur_terms, db == cur_db) %>% top_n(n_terms,  #>                 wt = Combined.Score) #>             if (cur_mod == \"black\") { #>                 text_color = \"grey\" #>             } #>             else { #>                 text_color = \"black\" #>             } #>             if (logscale) { #>                 plot_df$Combined.Score <- log(plot_df$Combined.Score) #>                 lab <- \"Enrichment log(combined score)\" #>                 x <- 0.2 #>             } #>             else { #>                 lab <- \"Enrichment (combined score)\" #>                 x <- 5 #>             } #>             plot_list[[cur_db]] <- ggplot(plot_df, aes(x = Combined.Score,  #>                 y = reorder(wrap, Combined.Score))) + geom_bar(stat = \"identity\",  #>                 position = \"identity\", color = \"white\", fill = cur_color) +  #>                 geom_text(aes(label = wrap), x = x, color = text_color,  #>                   size = 3.5, hjust = \"left\") + ylab(\"Term\") +  #>                 xlab(lab) + ggtitle(cur_db) + theme(panel.grid.major = element_blank(),  #>                 panel.grid.minor = element_blank(), legend.title = element_blank(),  #>                 axis.ticks.y = element_blank(), axis.text.y = element_blank(),  #>                 plot.title = element_text(hjust = 0.5)) #>         } #>         pdf(paste0(outdir, \"/\", cur_mod, \".pdf\"), width = plot_size[1],  #>             height = plot_size[2]) #>         for (plot in plot_list) { #>             print(plot) #>         } #>         dev.off() #>     } #> } #> <bytecode: 0x7fbd5a85dcf0> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrDotPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"EnrichrDotPlot — EnrichrDotPlot","title":"EnrichrDotPlot — EnrichrDotPlot","text":"Makes barplots Enrichr data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrDotPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EnrichrDotPlot — EnrichrDotPlot","text":"","code":"EnrichrDotPlot(   seurat_obj,   database,   mods = \"all\",   outdir = \"enrichr_plots\",   n_terms = 3,   break_ties = TRUE,   wgcna_name = NULL,   logscale = TRUE,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrDotPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EnrichrDotPlot — EnrichrDotPlot","text":"seurat_obj Seurat object wgcna_name name scWGCNA experiment seurat_obj@misc slot dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/EnrichrDotPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EnrichrDotPlot — EnrichrDotPlot","text":"","code":"EnrichrBarPlot #> function (seurat_obj, outdir = \"enrichr_plots\", n_terms = 25,  #>     plot_size = c(6, 15), wgcna_name = NULL, logscale = FALSE,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     enrichr_df <- GetEnrichrTable(seurat_obj, wgcna_name) #>     wrapText <- function(x, len) { #>         sapply(x, function(y) paste(strwrap(y, len), collapse = \"\\n\"),  #>             USE.NAMES = FALSE) #>     } #>     if (!dir.exists(outdir)) { #>         dir.create(outdir) #>     } #>     for (i in 1:length(mods)) { #>         cur_mod <- mods[i] #>         cur_terms <- subset(enrichr_df, module == cur_mod) #>         print(cur_mod) #>         cur_color <- modules %>% subset(module == cur_mod) %>%  #>             .$color %>% unique %>% as.character #>         if (nrow(cur_terms) == 0) { #>             next #>         } #>         cur_terms$wrap <- wrapText(cur_terms$Term, 45) #>         plot_list <- list() #>         for (cur_db in dbs) { #>             plot_df <- subset(cur_terms, db == cur_db) %>% top_n(n_terms,  #>                 wt = Combined.Score) #>             if (cur_mod == \"black\") { #>                 text_color = \"grey\" #>             } #>             else { #>                 text_color = \"black\" #>             } #>             if (logscale) { #>                 plot_df$Combined.Score <- log(plot_df$Combined.Score) #>                 lab <- \"Enrichment log(combined score)\" #>                 x <- 0.2 #>             } #>             else { #>                 lab <- \"Enrichment (combined score)\" #>                 x <- 5 #>             } #>             plot_list[[cur_db]] <- ggplot(plot_df, aes(x = Combined.Score,  #>                 y = reorder(wrap, Combined.Score))) + geom_bar(stat = \"identity\",  #>                 position = \"identity\", color = \"white\", fill = cur_color) +  #>                 geom_text(aes(label = wrap), x = x, color = text_color,  #>                   size = 3.5, hjust = \"left\") + ylab(\"Term\") +  #>                 xlab(lab) + ggtitle(cur_db) + theme(panel.grid.major = element_blank(),  #>                 panel.grid.minor = element_blank(), legend.title = element_blank(),  #>                 axis.ticks.y = element_blank(), axis.text.y = element_blank(),  #>                 plot.title = element_text(hjust = 0.5)) #>         } #>         pdf(paste0(outdir, \"/\", cur_mod, \".pdf\"), width = plot_size[1],  #>             height = plot_size[2]) #>         for (plot in plot_list) { #>             print(plot) #>         } #>         dev.off() #>     } #> } #> <bytecode: 0x7fbd5a85dcf0> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetDatExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"GetDatExpr — GetDatExpr","title":"GetDatExpr — GetDatExpr","text":"function gets expression matrix metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetDatExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetDatExpr — GetDatExpr","text":"","code":"GetDatExpr(seurat_obj, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetDatExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetDatExpr — GetDatExpr","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetDatExpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetDatExpr — GetDatExpr","text":"","code":"GetDatExpr(pbmc) #> Error in GetDatExpr(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMEs.html","id":null,"dir":"Reference","previous_headings":"","what":"GetMEs — GetMEs","title":"GetMEs — GetMEs","text":"Function retrieve module eigengens Seurat object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMEs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetMEs — GetMEs","text":"","code":"GetMEs(seurat_obj, harmonized = TRUE, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMEs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetMEs — GetMEs","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMEs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetMEs — GetMEs","text":"","code":"ModuleEigengenes(pbmc) #> Error in ModuleEigengenes(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMultiExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"GetMultiExpr — GetMultiExpr","title":"GetMultiExpr — GetMultiExpr","text":"function gets expression matrix metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMultiExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetMultiExpr — GetMultiExpr","text":"","code":"GetMultiExpr(seurat_obj, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMultiExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetMultiExpr — GetMultiExpr","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/GetMultiExpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetMultiExpr — GetMultiExpr","text":"","code":"GetDatExpr(pbmc) #> Error in GetDatExpr(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/HubGeneNetworkPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"HubGeneNetworkPlot — HubGeneNetworkPlot","title":"HubGeneNetworkPlot — HubGeneNetworkPlot","text":"Construct unified network plot comprising hub genes multiple modules.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/HubGeneNetworkPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HubGeneNetworkPlot — HubGeneNetworkPlot","text":"","code":"HubGeneNetworkPlot(   seurat_obj,   mods = \"all\",   n_hubs = 6,   n_other = 3,   sample_edges = TRUE,   edge_prop = 0.5,   return_graph = FALSE,   edge.alpha = 0.25,   vertex.label.cex = 0.5,   hub.vertex.size = 4,   other.vertex.size = 1,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/HubGeneNetworkPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HubGeneNetworkPlot — HubGeneNetworkPlot","text":"seurat_obj Seurat object mods Names modules plot. mods = \"\", modules plotted. n_hubs number hub genes plot module. n_other number non-hub genes sample module edge_prop proportion edges graph sample. return_graph logical determining whether return graph (TRUE) plot graph (FALSE) edge.alpha Scaling factor edge opacity vertex.label.cex font size gene labels hub.vertex.size size hub gene nodes .vertex.size size gene nodes wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/HubGeneNetworkPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HubGeneNetworkPlot — HubGeneNetworkPlot","text":"","code":"HubGeneNetworkPlot #> function (seurat_obj, mods = \"all\", n_hubs = 6, n_other = 3,  #>     sample_edges = TRUE, edge_prop = 0.5, return_graph = FALSE,  #>     edge.alpha = 0.25, vertex.label.cex = 0.5, hub.vertex.size = 4,  #>     other.vertex.size = 1, wgcna_name = NULL, ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     MEs <- GetMEs(seurat_obj, wgcna_name) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     if (mods == \"all\") { #>         mods <- levels(modules$module) #>         mods <- mods[mods != \"grey\"] #>     } #>     else { #>         modules <- modules %>% subset(module %in% mods) #>     } #>     TOM <- GetTOM(seurat_obj, wgcna_name) #>     hub_list <- lapply(mods, function(cur_mod) { #>         cur <- subset(modules, module == cur_mod) #>         cur[, c(\"gene_name\", paste0(\"kME_\", cur_mod))] %>% top_n(n_hubs) %>%  #>             .$gene_name #>     }) #>     names(hub_list) <- mods #>     other_genes <- modules %>% subset(!(gene_name %in% unlist(hub_list))) %>%  #>         group_by(module) %>% sample_n(n_other, replace = TRUE) %>%  #>         .$gene_name %>% unique #>     selected_genes <- c(unlist(hub_list), other_genes) #>     selected_modules <- modules %>% subset(gene_name %in% selected_genes) #>     subset_TOM <- TOM[selected_genes, selected_genes] #>     selected_modules$geneset <- ifelse(selected_modules$gene_name %in%  #>         other_genes, \"other\", \"hub\") #>     selected_modules$size <- ifelse(selected_modules$geneset ==  #>         \"hub\", hub.vertex.size, other.vertex.size) #>     selected_modules$label <- ifelse(selected_modules$geneset ==  #>         \"hub\", as.character(selected_modules$gene_name), \"\") #>     selected_modules$fontcolor <- ifelse(selected_modules$color ==  #>         \"black\", \"gray50\", \"black\") #>     print(table(selected_modules$module)) #>     edge_cutoff <- min(sapply(1:nrow(subset_TOM), function(i) { #>         max(subset_TOM[i, ]) #>     })) #>     edge_df <- reshape2::melt(subset_TOM) %>% subset(value >=  #>         edge_cutoff) #>     edge_df$color <- future.apply::future_sapply(1:nrow(edge_df),  #>         function(i) { #>             gene1 = as.character(edge_df[i, \"Var1\"]) #>             gene2 = as.character(edge_df[i, \"Var2\"]) #>             col1 <- modules %>% subset(gene_name == gene1) %>%  #>                 .$color #>             col2 <- modules %>% subset(gene_name == gene2) %>%  #>                 .$color #>             if (col1 == col2) { #>                 col = col1 #>             } #>             else { #>                 col = \"grey90\" #>             } #>             col #>         }) #>     groups <- unique(edge_df$color) #>     print(groups) #>     if (sample_edges) { #>         print(\"here\") #>         temp <- do.call(rbind, lapply(groups, function(cur_group) { #>             cur_df <- edge_df %>% subset(color == cur_group) #>             n_edges <- nrow(cur_df) #>             cur_sample <- sample(1:n_edges, round(n_edges * edge_prop)) #>             cur_df[cur_sample, ] #>         })) #>     } #>     else { #>         temp <- do.call(rbind, lapply(groups, function(cur_group) { #>             cur_df <- edge_df %>% subset(color == cur_group) #>             n_edges <- nrow(cur_df) #>             cur_df %>% dplyr::top_n(round(n_edges * edge_prop),  #>                 wt = value) #>         })) #>     } #>     edge_df <- temp #>     print(dim(edge_df)) #>     edge_df <- edge_df %>% group_by(color) %>% mutate(value = scale01(value)) #>     edge_df$color <- sapply(1:nrow(edge_df), function(i) { #>         a = edge_df$value[i] #>         alpha(edge_df$color[i], alpha = a) #>     }) #>     g <- igraph::graph_from_data_frame(edge_df, directed = FALSE,  #>         vertices = selected_modules) #>     l <- igraph::layout_with_fr(g, ...) #>     if (return_graph) { #>         return(g) #>     } #>     plot(g, layout = l, edge.color = adjustcolor(E(g)$color,  #>         alpha.f = edge.alpha), vertex.size = V(g)$size, edge.curved = 0,  #>         edge.width = 0.5, vertex.color = V(g)$color, vertex.frame.color = V(g)$color,  #>         vertex.label = V(g)$label, vertex.label.family = \"Helvetica\",  #>         vertex.label.font = 3, vertex.label.color = V(g)$fontcolor,  #>         vertex.label.cex = vertex.label.cex, ...) #> } #> <bytecode: 0x7fbd589cc780> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/MetacellsByGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"MetacellsByGroups — MetacellsByGroups","title":"MetacellsByGroups — MetacellsByGroups","text":"function takes Seurat object constructs averaged 'metacells' based neighboring cells provided groupings, cluster cell type.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MetacellsByGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetacellsByGroups — MetacellsByGroups","text":"","code":"MetacellsByGroups(   seurat_obj,   group.by = c(\"seurat_clusters\"),   ident.group = \"seurat_clusters\",   k = 50,   reduction = \"umap\",   assay = \"RNA\",   cells.use = NULL,   slot = \"counts\",   wgcna_name = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/MetacellsByGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MetacellsByGroups — MetacellsByGroups","text":"seurat_obj Seurat object group.character vector Seurat metadata column names representing groups metacells computed. k Number nearest neighbors aggregate. Default = 50 reduction dimensionality reduction stored Seurat object. Default = 'umap' assay Assay extract data aggregation. Default = 'RNA' slot Slot extract data aggregation. Default = 'data' name string appended resulting metalcells. Default = 'agg'","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MetacellsByGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetacellsByGroups — MetacellsByGroups","text":"","code":"MetacellsByGroups(pbmc) #> Error in MetacellsByGroups(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleConnectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleConnectivity — ModuleConnectivity","title":"ModuleConnectivity — ModuleConnectivity","text":"Computes intramodular connectivity (kME) based module eigengenes.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleConnectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleConnectivity — ModuleConnectivity","text":"","code":"ModuleConnectivity(seurat_obj, harmonized = TRUE, wgcna_name = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleConnectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleConnectivity — ModuleConnectivity","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleConnectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleConnectivity — ModuleConnectivity","text":"","code":"ModuleConnectivity(pbmc) #> Error in ModuleConnectivity(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleCorrNetworks — ModuleCorrNetwork","title":"ModuleCorrNetworks — ModuleCorrNetwork","text":"Plot Module Eigengene correlogram","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleCorrNetworks — ModuleCorrNetwork","text":"","code":"ModuleCorrNetwork(   seurat_obj,   wgcna_name = NULL,   cluster_col = NULL,   exclude_grey = TRUE,   features = \"hMEs\",   reduction = \"umap\",   cor_cutoff = 0.2,   label_vertices = FALSE,   edge_scale = 5,   vertex_size = 15,   niter = 100,   vertex_frame = FALSE )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleCorrNetworks — ModuleCorrNetwork","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleCorrNetworks — ModuleCorrNetwork","text":"","code":"ModuleCorrNetwork #> function (seurat_obj, wgcna_name = NULL, cluster_col = NULL,  #>     exclude_grey = TRUE, features = \"hMEs\", reduction = \"umap\",  #>     cor_cutoff = 0.2, label_vertices = FALSE, edge_scale = 5,  #>     vertex_size = 15, niter = 100, vertex_frame = FALSE)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     if (features == \"hMEs\") { #>         MEs <- GetMEs(seurat_obj, TRUE, wgcna_name) #>     } #>     else if (features == \"MEs\") { #>         MEs <- GetMEs(seurat_obj, FALSE, wgcna_name) #>     } #>     else if (features == \"scores\") { #>         MEs <- GetModuleScores(seurat_obj, wgcna_name) #>     } #>     else if (features == \"average\") { #>         MEs <- GetAvgModuleExpr(seurat_obj, wgcna_name) #>         restrict_range <- FALSE #>     } #>     else (stop(\"Invalid feature selection. Valid choices: hMEs, MEs, scores, average\")) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     if (exclude_grey) { #>         MEs <- MEs[, colnames(MEs) != \"grey\"] #>         modules <- modules %>% subset(color != \"grey\") #>     } #>     mods <- colnames(MEs) #>     if (is.null(cluster_col)) { #>         clusters <- Idents(seurat_obj) #>     } #>     else { #>         clusters <- droplevels(seurat_obj@meta.data[[cluster_col]]) #>     } #>     MEs$cluster <- clusters #>     cluster_ME_av <- do.call(rbind, lapply(split(MEs, MEs$cluster),  #>         function(x) { #>             colMeans(x[, mods]) #>         })) %>% as.data.frame #>     top_clusters <- sapply(mods, function(x) { #>         rownames(cluster_ME_av[cluster_ME_av[, x] == max(cluster_ME_av[,  #>             x]), ]) #>     }) #>     red_df <- as.data.frame(seurat_obj@reductions[[reduction]]@cell.embeddings) #>     red_df$cluster <- clusters #>     red_av <- do.call(rbind, lapply(split(red_df, red_df$cluster),  #>         function(x) { #>             colMeans(x[, 1:2]) #>         })) %>% as.data.frame #>     cor_mat <- Hmisc::rcorr(as.matrix(MEs[, 1:ncol(MEs) - 1]))$r #>     cor_mat[lower.tri(cor_mat)] <- NA #>     cor_df <- reshape2::melt(cor_mat) %>% na.omit #>     cor_df <- cor_df %>% subset(!(Var1 == Var2)) #>     cor_df <- cor_df %>% subset(abs(value) >= cor_cutoff) #>     v_df <- data.frame(name = mods, cluster = as.character(top_clusters)) #>     unique_mods <- distinct(modules[, c(\"module\", \"color\")]) #>     rownames(unique_mods) <- unique_mods$module #>     v_df$color <- unique_mods[v_df$name, \"color\"] #>     v_df$x <- red_av[v_df$cluster, 1] #>     v_df$y <- red_av[v_df$cluster, 2] #>     g <- igraph::graph_from_data_frame(cor_df, directed = FALSE,  #>         vertices = v_df) #>     e <- get.edgelist(g, name = FALSE) #>     l <- qgraph::qgraph.layout.fruchtermanreingold(e, vcount = vcount(g),  #>         weights = E(g)$value, repulse.rad = (vcount(g)), niter = niter,  #>         ) #>     plot_df <- rbind(cor_df, data.frame(Var1 = c(\"x\", \"y\"), Var2 = c(\"y\",  #>         \"x\"), value = c(-1, 1))) #>     temp <- ggplot(plot_df, aes(x = value, y = value, color = value)) +  #>         geom_point() + scale_color_gradient2(high = \"darkorchid1\",  #>         mid = \"white\", low = \"seagreen\", midpoint = 0) #>     temp <- ggplot_build(temp) #>     E(g)$color <- temp$data[[1]]$colour[1:nrow(cor_df)] #>     if (label_vertices) { #>         labels <- V(g)$name #>     } #>     else { #>         labels <- NA #>     } #>     if (vertex_frame) { #>         frame_color <- \"black\" #>     } #>     else { #>         frame_color <- V(g)$color #>     } #>     plot(g, layout = l, edge.color = E(g)$color, edge.curved = 0,  #>         edge.width = abs(E(g)$value) * edge_scale, vertex.color = V(g)$color,  #>         vertex.frame.color = frame_color, vertex.label = labels,  #>         vertex.label.family = \"Helvetica\", vertex.label.color = \"black\",  #>         vertex.label.cex = 0.5, vertex.size = vertex_size) #> } #> <bytecode: 0x7fbd572b0430> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrelogram.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleCorrelogram — ModuleCorrelogram","title":"ModuleCorrelogram — ModuleCorrelogram","text":"Plot Module Eigengene correlogram","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrelogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleCorrelogram — ModuleCorrelogram","text":"","code":"ModuleCorrelogram(   seurat_obj,   MEs2 = NULL,   features = \"hMEs\",   order = \"original\",   method = \"ellipse\",   exclude_grey = TRUE,   type = \"upper\",   tl.col = \"black\",   tl.srt = 45,   sig.level = c(1e-04, 0.001, 0.01, 0.05),   pch.cex = 0.7,   col = NULL,   ncolors = 200,   wgcna_name = NULL,   wgcna_name2 = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrelogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleCorrelogram — ModuleCorrelogram","text":"seurat_obj Seurat object features plot? Can select hMEs, MEs, scores, average","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleCorrelogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleCorrelogram — ModuleCorrelogram","text":"","code":"MECorrelogram #> Error in eval(expr, envir, enclos): object 'MECorrelogram' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleEigengenes.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleEigengenes — ModuleEigengenes","title":"ModuleEigengenes — ModuleEigengenes","text":"Computes module eigengenes WGCNA co-expression modules","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleEigengenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleEigengenes — ModuleEigengenes","text":"","code":"ModuleEigengenes(   seurat_obj,   group.by.vars = NULL,   modules = NULL,   verbose = TRUE,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleEigengenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleEigengenes — ModuleEigengenes","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleEigengenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleEigengenes — ModuleEigengenes","text":"","code":"ModuleEigengenes(pbmc) #> Error in ModuleEigengenes(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleExprScore.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleExprScore — ModuleExprScore","title":"ModuleExprScore — ModuleExprScore","text":"Computes module eigengenes WGCNA co-expression modules","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleExprScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleExprScore — ModuleExprScore","text":"","code":"ModuleExprScore(   seurat_obj,   n_genes = 25,   wgcna_name = NULL,   method = \"Seurat\",   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleExprScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleExprScore — ModuleExprScore","text":"seurat_obj Seurat object method Seurat UCell?","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleExprScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleExprScore — ModuleExprScore","text":"","code":"ModuleExprScores (pbmc) #> Error in ModuleExprScores(pbmc): could not find function \"ModuleExprScores\""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleFeaturePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleFeaturePlot — ModuleFeaturePlot","title":"ModuleFeaturePlot — ModuleFeaturePlot","text":"Plot module eigengenes FeaturePlot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleFeaturePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleFeaturePlot — ModuleFeaturePlot","text":"","code":"ModuleFeaturePlot(   seurat_obj,   module_names = NULL,   wgcna_name = NULL,   reduction = \"umap\",   features = \"hMEs\",   order_points = TRUE,   restrict_range = TRUE,   point_size = 0.5,   alpha = 1,   label_legend = FALSE,   ucell = FALSE )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleFeaturePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleFeaturePlot — ModuleFeaturePlot","text":"seurat_obj Seurat object features plot? Can select hMEs, MEs, scores, average order TRUE, FALSE, \"shuffle\" valid options","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleFeaturePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleFeaturePlot — ModuleFeaturePlot","text":"","code":"ModuleFeaturePlot #> function (seurat_obj, module_names = NULL, wgcna_name = NULL,  #>     reduction = \"umap\", features = \"hMEs\", order_points = TRUE,  #>     restrict_range = TRUE, point_size = 0.5, alpha = 1, label_legend = FALSE,  #>     ucell = FALSE)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     if (features == \"hMEs\") { #>         MEs <- GetMEs(seurat_obj, TRUE, wgcna_name) #>     } #>     else if (features == \"MEs\") { #>         MEs <- GetMEs(seurat_obj, FALSE, wgcna_name) #>     } #>     else if (features == \"scores\") { #>         MEs <- GetModuleScores(seurat_obj, wgcna_name) #>     } #>     else if (features == \"average\") { #>         MEs <- GetAvgModuleExpr(seurat_obj, wgcna_name) #>         restrict_range <- FALSE #>     } #>     else (stop(\"Invalid feature selection. Valid choices: hMEs, MEs, scores, average\")) #>     if (ucell) { #>         restrict_range <- FALSE #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     if (is.null(module_names)) { #>         module_names <- colnames(MEs) #>         module_names <- module_names[module_names != \"grey\"] #>     } #>     umap <- seurat_obj@reductions[[reduction]]@cell.embeddings #>     x_name <- colnames(umap)[1] #>     y_name <- colnames(umap)[2] #>     plot_df <- cbind(umap, MEs) %>% as.data.frame() #>     plot_list <- list() #>     for (cur_mod in module_names) { #>         print(cur_mod) #>         cur_color <- modules %>% subset(module == cur_mod) %>%  #>             .$color %>% unique #>         plot_range <- plot_df[, cur_mod] %>% range #>         if (restrict_range) { #>             if (abs(plot_range[1]) > abs(plot_range[2])) { #>                 plot_range[1] <- -1 * plot_range[2] #>             } #>             else { #>                 plot_range[2] <- -1 * plot_range[1] #>             } #>             plot_df[, cur_mod] <- ifelse(plot_df[, cur_mod] >  #>                 plot_range[2], plot_range[2], plot_df[, cur_mod]) #>             plot_df[, cur_mod] <- ifelse(plot_df[, cur_mod] <  #>                 plot_range[1], plot_range[1], plot_df[, cur_mod]) #>         } #>         cur_plot_df <- plot_df[, c(colnames(umap), cur_mod)] #>         colnames(cur_plot_df)[3] <- \"val\" #>         if (order_points == TRUE) { #>             cur_plot_df <- cur_plot_df %>% dplyr::arrange(val) #>         } #>         else if (order_points == \"shuffle\") { #>             cur_plot_df <- cur_plot_df[sample(nrow(cur_plot_df)),  #>                 ] #>         } #>         p <- cur_plot_df %>% ggplot(aes_string(x = x_name, y = y_name,  #>             color = \"val\")) + geom_point(size = point_size, alpha = alpha) +  #>             ggtitle(cur_mod) + umap_theme + labs(color = \"\") #>         if (!ucell) { #>             p <- p + scale_color_gradient2(low = \"grey75\", mid = \"grey95\",  #>                 high = cur_color, breaks = plot_range, labels = c(\"-\",  #>                   \"+\"), guide = guide_colorbar(ticks = FALSE,  #>                   barwidth = 0.5, barheight = 4)) #>         } #>         else { #>             p <- p + scale_color_gradient(low = \"grey95\", high = cur_color,  #>                 breaks = plot_range, labels = c(\"0\", \"+\"), guide = guide_colorbar(ticks = FALSE,  #>                   barwidth = 0.5, barheight = 4)) #>         } #>         plot_list[[cur_mod]] <- p #>     } #>     if (length(plot_list) == 1) { #>         p <- plot_list[[1]] #>     } #>     else { #>         p <- plot_list #>     } #>     p #> } #> <bytecode: 0x7fbd579fcf20> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleNetworkPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleNetworkPlot — ModuleNetworkPlot","title":"ModuleNetworkPlot — ModuleNetworkPlot","text":"Visualizes top hub genes selected modules circular network plot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleNetworkPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleNetworkPlot — ModuleNetworkPlot","text":"","code":"ModuleNetworkPlot(   seurat_obj,   mods = \"all\",   outdir = \"ModuleNetworks\",   plot_size = c(6, 6),   wgcna_name = NULL,   label_center = FALSE,   edge.alpha = 0.25,   vertex.label.cex = 1,   vertex.size = 6,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleNetworkPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleNetworkPlot — ModuleNetworkPlot","text":"seurat_obj Seurat object mods Names modules plot. mods = \"\", modules plotted. outdir directory plots stored. plot_size vector containing width height network plots. wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleNetworkPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleNetworkPlot — ModuleNetworkPlot","text":"","code":"ModuleNetworkPlot #> function (seurat_obj, mods = \"all\", outdir = \"ModuleNetworks\",  #>     plot_size = c(6, 6), wgcna_name = NULL, label_center = FALSE,  #>     edge.alpha = 0.25, vertex.label.cex = 1, vertex.size = 6,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     MEs <- GetMEs(seurat_obj, wgcna_name) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     if (mods == \"all\") { #>         mods <- levels(modules$module) #>         mods <- mods[mods != \"grey\"] #>     } #>     if (!dir.exists(outdir)) { #>         dir.create(outdir) #>     } #>     TOM <- GetTOM(seurat_obj, wgcna_name) #>     n_hubs <- 25 #>     hub_list <- lapply(mods, function(cur_mod) { #>         cur <- subset(modules, module == cur_mod) #>         cur <- cur[, c(\"gene_name\", paste0(\"kME_\", cur_mod))] %>%  #>             top_n(n_hubs) #>         colnames(cur)[2] <- \"var\" #>         cur %>% arrange(desc(var)) %>% .$gene_name #>     }) #>     names(hub_list) <- mods #>     print(\"here\") #>     for (cur_mod in mods) { #>         print(cur_mod) #>         cur_color <- modules %>% subset(module == cur_mod) %>%  #>             .$color %>% unique #>         n_genes = 25 #>         n_conns = 500 #>         cur_kME <- paste0(\"kME_\", cur_mod) #>         cur_genes <- hub_list[[cur_mod]] #>         print(cur_genes) #>         matchind <- match(cur_genes, colnames(TOM)) #>         reducedTOM = TOM[matchind, matchind] #>         orderind <- order(reducedTOM, decreasing = TRUE) #>         connections2keep <- orderind[1:n_conns] #>         reducedTOM <- matrix(0, nrow(reducedTOM), ncol(reducedTOM)) #>         reducedTOM[connections2keep] <- 1 #>         print(\"here\") #>         print(dim(reducedTOM)) #>         print(n_genes) #>         if (label_center) { #>             cur_genes[11:25] <- \"\" #>         } #>         gA <- graph.adjacency(as.matrix(reducedTOM[1:10, 1:10]),  #>             mode = \"undirected\", weighted = TRUE, diag = FALSE) #>         gB <- graph.adjacency(as.matrix(reducedTOM[11:n_genes,  #>             11:n_genes]), mode = \"undirected\", weighted = TRUE,  #>             diag = FALSE) #>         layoutCircle <- rbind(layout.circle(gA)/2, layout.circle(gB)) #>         g1 <- graph.adjacency(as.matrix(reducedTOM), mode = \"undirected\",  #>             weighted = TRUE, diag = FALSE) #>         pdf(paste0(outdir, \"/\", cur_mod, \".pdf\"), width = plot_size[1],  #>             height = plot_size[2], useDingbats = FALSE) #>         plot(g1, edge.color = adjustcolor(cur_color, alpha.f = 0.25),  #>             edge.alpha = edge.alpha, vertex.color = cur_color,  #>             vertex.label = as.character(cur_genes), vertex.label.dist = 1.1,  #>             vertex.label.degree = -pi/4, vertex.label.color = \"black\",  #>             vertex.label.family = \"Helvetica\", vertex.label.font = 3,  #>             vertex.label.cex = vertex.label.cex, vertex.frame.color = \"black\",  #>             layout = jitter(layoutCircle), vertex.size = vertex.size,  #>             main = paste(cur_mod)) #>         dev.off() #>     } #> } #> <bytecode: 0x7fbd5aaeace0> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleTraitCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleTraitCorrelation' — ModuleTraitCorrelation","title":"ModuleTraitCorrelation' — ModuleTraitCorrelation","text":"Correlates categorical numeric variables Module Eigengenes hub-gene scores.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleTraitCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleTraitCorrelation' — ModuleTraitCorrelation","text":"","code":"ModuleTraitCorrelation(   seurat_obj,   traits,   group.by = NULL,   features = \"hMEs\",   cor_method = \"pearson\",   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleTraitCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleTraitCorrelation' — ModuleTraitCorrelation","text":"seurat_obj list column names Seurat object's metadata wish correlate module. Traits must categorical variable (character vector), numeric variable. features features use summarize modules? Valid choices hMEs, MEs, scores cor_meth method use correlation? Valid choices pearson, spearman, kendall.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleTraitCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleTraitCorrelation' — ModuleTraitCorrelation","text":"","code":"ModuleTraitCorrelation #> function (seurat_obj, traits, group.by = NULL, features = \"hMEs\",  #>     cor_method = \"pearson\", wgcna_name = NULL, ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     if (features == \"hMEs\") { #>         MEs <- GetMEs(seurat_obj, TRUE, wgcna_name) #>     } #>     else if (features == \"MEs\") { #>         MEs <- GetMEs(seurat_obj, FALSE, wgcna_name) #>     } #>     else if (features == \"scores\") { #>         MEs <- GetModuleScores(seurat_obj, wgcna_name) #>     } #>     else { #>         stop(\"Invalid feature selection. Valid choices: hMEs, MEs, scores, average\") #>     } #>     if (sum(traits %in% colnames(seurat_obj@meta.data)) != length(traits)) { #>         stop(paste(\"Some of the provided traits were not found in the Seurat obj:\",  #>             paste(traits[!(traits %in% colnames(seurat_obj@meta.data))],  #>                 collapse = \", \"))) #>     } #>     if (is.null(group.by)) { #>         group.by <- \"temp_ident\" #>         seurat_obj$temp_ident <- Idents(seurat_obj) #>     } #>     valid_types <- c(\"numeric\", \"factor\", \"integer\") #>     data_types <- sapply(traits, function(x) { #>         class(seurat_obj@meta.data[, x]) #>     }) #>     if (!all(data_types %in% valid_types)) { #>         incorrect <- traits[!(data_types %in% valid_types)] #>         stop(paste0(\"Invalid data types for \", paste(incorrect,  #>             collapse = \", \"), \". Accepted data types are numeric, factor, integer.\")) #>     } #>     if (any(data_types == \"factor\")) { #>         factor_traits <- traits[data_types == \"factor\"] #>         for (tr in factor_traits) { #>             warning(paste0(\"Trait \", tr, \" is a factor with levels \",  #>                 paste0(levels(seurat_obj@meta.data[, tr]), collapse = \", \"),  #>                 \". Levels will be converted to numeric IN THIS ORDER for the correlation, is this the expected order?\")) #>         } #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     trait_df <- seurat_obj@meta.data[, traits] #>     if (any(data_types == \"factor\")) { #>         factor_traits <- traits[data_types == \"factor\"] #>         for (tr in factor_traits) { #>             trait_df[, tr] <- as.numeric(trait_df[, tr]) #>         } #>     } #>     cor_list <- list() #>     cor_list[[\"all_cells\"]] <- cor(as.matrix(trait_df), as.matrix(MEs),  #>         method = cor_method) #>     trait_df <- cbind(trait_df, seurat_obj@meta.data[, group.by]) #>     colnames(trait_df)[ncol(trait_df)] <- \"group\" #>     MEs <- cbind(as.data.frame(MEs), seurat_obj@meta.data[, group.by]) #>     colnames(MEs)[ncol(MEs)] <- \"group\" #>     if (class(seurat_obj@meta.data[, group.by]) == \"factor\") { #>         group_names <- levels(seurat_obj@meta.data[, group.by]) #>     } #>     else { #>         group_names <- levels(as.factor(seurat_obj@meta.data[,  #>             group.by])) #>     } #>     trait_list <- dplyr::group_split(trait_df, group, .keep = FALSE) #>     ME_list <- dplyr::group_split(MEs, group, .keep = FALSE) #>     names(trait_list) <- group_names #>     names(ME_list) <- group_names #>     for (i in names(trait_list)) { #>         cor_list[[i]] <- cor(as.matrix(trait_list[[i]]), as.matrix(ME_list[[i]]),  #>             method = cor_method) #>     } #>     mt_cor <- list(cor_mat = cor_list, pval = NA, fdr = NA) #>     seurat_obj <- SetModuleTraitCorrelation(seurat_obj, mt_cor,  #>         wgcna_name) #>     seurat_obj #> } #> <bytecode: 0x7fbd52611220> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleUMAPPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ModuleUMAPPlot — ModuleUMAPPlot","title":"ModuleUMAPPlot — ModuleUMAPPlot","text":"Makes igraph network plot using module UMAP","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleUMAPPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModuleUMAPPlot — ModuleUMAPPlot","text":"","code":"ModuleUMAPPlot(   seurat_obj,   sample_edges = TRUE,   edge_prop = 0.2,   label_hubs = 5,   edge.alpha = 0.25,   vertex.label.cex = 0.5,   hub.vertex.size = 4,   other.vertex.size = 1,   return_graph = FALSE,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleUMAPPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModuleUMAPPlot — ModuleUMAPPlot","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ModuleUMAPPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModuleUMAPPlot — ModuleUMAPPlot","text":"","code":"ModuleUMAPPlot #> function (seurat_obj, sample_edges = TRUE, edge_prop = 0.2, label_hubs = 5,  #>     edge.alpha = 0.25, vertex.label.cex = 0.5, hub.vertex.size = 4,  #>     other.vertex.size = 1, return_graph = FALSE, wgcna_name = NULL,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     TOM <- GetTOM(seurat_obj, wgcna_name) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     umap_df <- GetModuleUMAP(seurat_obj, wgcna_name) #>     mods <- levels(umap_df$modules) #>     selected_modules <- modules[umap_df$gene, ] #>     selected_modules <- cbind(selected_modules, umap_df[, c(\"UMAP1\",  #>         \"UMAP2\", \"hub\", \"kME\")]) #>     subset_TOM <- TOM[umap_df$gene, umap_df$gene[umap_df$hub ==  #>         \"hub\"]] #>     label_genes <- selected_modules %>% group_by(module) %>%  #>         top_n(label_hubs, wt = kME) %>% .$gene_name #>     selected_modules$label <- ifelse(selected_modules$gene_name %in%  #>         label_genes, selected_modules$gene_name, \"\") #>     selected_modules$fontcolor <- ifelse(selected_modules$color ==  #>         \"black\", \"gray50\", \"black\") #>     selected_modules$framecolor <- ifelse(selected_modules$gene_name %in%  #>         label_genes, \"black\", selected_modules$color) #>     edge_df <- subset_TOM %>% melt #>     print(dim(edge_df)) #>     edge_df$color <- future.apply::future_sapply(1:nrow(edge_df),  #>         function(i) { #>             gene1 = as.character(edge_df[i, \"Var1\"]) #>             gene2 = as.character(edge_df[i, \"Var2\"]) #>             col1 <- modules %>% subset(gene_name == gene1) %>%  #>                 .$color #>             col2 <- modules %>% subset(gene_name == gene2) %>%  #>                 .$color #>             if (col1 == col2) { #>                 col = col1 #>             } #>             else { #>                 col = \"grey90\" #>             } #>             col #>         }) #>     groups <- unique(edge_df$color) #>     print(groups) #>     if (sample_edges) { #>         print(\"here\") #>         temp <- do.call(rbind, lapply(groups, function(cur_group) { #>             cur_df <- edge_df %>% subset(color == cur_group) #>             n_edges <- nrow(cur_df) #>             cur_sample <- sample(1:n_edges, round(n_edges * edge_prop)) #>             cur_df[cur_sample, ] #>         })) #>     } #>     else { #>         temp <- do.call(rbind, lapply(groups, function(cur_group) { #>             cur_df <- edge_df %>% subset(color == cur_group) #>             n_edges <- nrow(cur_df) #>             cur_df %>% dplyr::top_n(round(n_edges * edge_prop),  #>                 wt = value) #>         })) #>     } #>     edge_df <- temp #>     print(dim(edge_df)) #>     edge_df <- edge_df %>% group_by(color) %>% mutate(value = scale01(value)) #>     edge_df <- edge_df %>% arrange(value) #>     edge_df <- rbind(subset(edge_df, color == \"grey90\"), subset(edge_df,  #>         color != \"grey90\")) #>     head(edge_df) #>     edge_df$color_alpha <- ifelse(edge_df$color == \"grey90\",  #>         alpha(edge_df$color, alpha = edge_df$value/2), alpha(edge_df$color,  #>             alpha = edge_df$value)) #>     selected_modules <- rbind(subset(selected_modules, hub ==  #>         \"other\"), subset(selected_modules, hub != \"other\")) #>     selected_modules <- rbind(subset(selected_modules, label ==  #>         \"\"), subset(selected_modules, label != \"\")) #>     g <- igraph::graph_from_data_frame(edge_df, directed = FALSE,  #>         vertices = selected_modules) #>     if (return_graph) { #>         return(g) #>     } #>     plot(g, layout = as.matrix(selected_modules[, c(\"UMAP1\",  #>         \"UMAP2\")]), edge.color = adjustcolor(E(g)$color_alpha,  #>         alpha.f = edge.alpha), vertex.size = V(g)$kME * 3, edge.curved = 0,  #>         edge.width = 0.5, vertex.color = V(g)$color, vertex.label = V(g)$label,  #>         vertex.label.dist = 1.1, vertex.label.degree = -pi/4,  #>         vertex.label.family = \"Helvetica\", vertex.label.font = 3,  #>         vertex.label.color = V(g)$fontcolor, vertex.label.cex = 0,  #>         vertex.frame.color = V(g)$framecolor) #> } #> <bytecode: 0x7fbd574cdee0> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifOverlapBarPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays the top n TFs in a set of modules as a bar plot — MotifOverlapBarPlot","title":"Displays the top n TFs in a set of modules as a bar plot — MotifOverlapBarPlot","text":"Displays top n TFs set modules bar plot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifOverlapBarPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays the top n TFs in a set of modules as a bar plot — MotifOverlapBarPlot","text":"","code":"MotifOverlapBarPlot(   seurat_obj,   n_tfs = 10,   plot_size = c(5, 6),   outdir = \"MotifOverlaps/\",   motif_font = \"helvetica_regular\",   module_names = NULL,   wgcna_name = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifOverlapBarPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays the top n TFs in a set of modules as a bar plot — MotifOverlapBarPlot","text":"seurat_obj Seurat object wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifOverlapBarPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displays the top n TFs in a set of modules as a bar plot — MotifOverlapBarPlot","text":"","code":"MotifOverlapBarPlot #> function (seurat_obj, n_tfs = 10, plot_size = c(5, 6), outdir = \"MotifOverlaps/\",  #>     motif_font = \"helvetica_regular\", module_names = NULL, wgcna_name = NULL)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     if (!dir.exists(outdir)) { #>         dir.create(outdir) #>     } #>     modules <- GetModules(seurat_obj) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     if (is.null(module_names)) { #>         module_names <- mods #>     } #>     overlap_df <- GetMotifOverlap(seurat_obj, wgcna_name) #>     motif_df <- GetMotifs(seurat_obj) #>     pfm <- GetPFMList(seurat_obj) #>     overlap_df$motif_ID <- motif_df$motif_ID[match(overlap_df$tf,  #>         motif_df$motif_name)] #>     overlap_df <- overlap_df %>% subset(module %in% module_names) #>     for (cur_mod in module_names) { #>         print(cur_mod) #>         plot_df <- overlap_df %>% subset(module == cur_mod) %>%  #>             top_n(n_tfs, wt = odds_ratio) %>% arrange(desc(odds_ratio)) #>         p1 <- plot_df %>% ggplot(aes(y = reorder(tf, odds_ratio),  #>             fill = odds_ratio, x = odds_ratio)) + geom_bar(stat = \"identity\",  #>             width = 0.7) + NoLegend() + scale_fill_gradient(high = unique(plot_df$color),  #>             low = \"grey90\") + ylab(\"\") + theme(axis.line.y = element_blank(),  #>             axis.text.y = element_blank(), plot.margin = margin(t = 0,  #>                 r = 0, b = 0, l = 0)) #>         plot_list <- list() #>         for (i in 1:nrow(plot_df)) { #>             cur_id <- plot_df[i, \"motif_ID\"] #>             cur_name <- plot_df[i, \"tf\"] #>             plot_list[[cur_id]] <- ggplot() + ggseqlogo::geom_logo(as.matrix(pfm[[cur_id]]),  #>                 font = motif_font) + ggseqlogo::theme_logo() +  #>                 xlab(\"\") + ylab(cur_name) + theme(axis.text.x = element_blank(),  #>                 axis.text.y = element_blank(), axis.title.y = element_text(angle = 0),  #>                 plot.margin = margin(t = 0, r = 0, b = 0, l = 0)) #>         } #>         patch1 <- wrap_plots(plot_list, ncol = 1) #>         outplot <- (patch1 | p1) + plot_layout(ncol = 2, widths = c(1,  #>             2)) + plot_annotation(title = paste0(\"Motif overlaps with \",  #>             cur_mod), theme = theme(plot.title = element_text(hjust = 0.5))) #>         pdf(paste0(outdir, \"/\", cur_mod, \"_motif_overlaps.pdf\"),  #>             width = plot_size[1], height = plot_size[2], useDingbats = FALSE) #>         print(outplot) #>         dev.off() #>     } #> } #> <bytecode: 0x7fbd5a27f740> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifScan.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan gene promoters for a set of TF PWMs — MotifScan","title":"Scan gene promoters for a set of TF PWMs — MotifScan","text":"Scan gene promoters set TF PWMs","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifScan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan gene promoters for a set of TF PWMs — MotifScan","text":"","code":"MotifScan(seurat_obj, species_genome, pfm, EnsDb, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifScan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan gene promoters for a set of TF PWMs — MotifScan","text":"","code":"MotifScan #> function (seurat_obj, species_genome, pfm, EnsDb, wgcna_name = NULL)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     motif_df <- data.frame(motif_name = purrr::map(1:length(pfm),  #>         function(i) { #>             pfm[[i]]@name #>         }) %>% unlist, motif_ID = purrr::map(1:length(pfm), function(i) { #>         pfm[[i]]@ID #>     }) %>% unlist) #>     gene.promoters <- ensembldb::promoters(EnsDb, filter = ~gene_biotype ==  #>         \"protein_coding\") %>% subset(seqnames %in% c(1:100)) #>     gene.coords <- ensembldb::genes(EnsDb, filter = ~gene_biotype ==  #>         \"protein_coding\") %>% subset(seqnames %in% c(1:100)) #>     gene.promoters$symbol <- gene.coords$symbol[match(gene.promoters$gene_id,  #>         names(gene.coords))] #>     gene.promoters <- keepSeqlevels(gene.promoters, value = levels(droplevels(seqnames(gene.promoters)))) #>     old_levels <- levels(seqnames(gene.promoters)) #>     new_levels <- ifelse(old_levels %in% c(\"X\", \"Y\"), old_levels,  #>         paste0(\"chr\", old_levels)) #>     gene.promoters <- renameSeqlevels(gene.promoters, new_levels) #>     genome(seqinfo(gene.promoters)) <- species_genome #>     my_promoters <- GRanges(seqnames = droplevels(seqnames(gene.promoters)),  #>         IRanges(start = start(gene.promoters), end = end(gene.promoters)),  #>         symbol = gene.promoters$symbol, genome = species_genome) #>     print(\"Matching motifs...\") #>     motif_ix <- motifmatchr::matchMotifs(pfm, my_promoters, genome = species_genome) #>     tf_match <- motifmatchr::motifMatches(motif_ix) #>     rownames(tf_match) <- my_promoters$symbol #>     colnames(tf_match) <- motif_df$motif_name #>     gene_list <- rownames(seurat_obj) #>     gene_list <- gene_list[gene_list %in% rownames(tf_match)] #>     tf_match <- tf_match[gene_list, ] #>     print(\"Getting TF target genes...\") #>     tfs <- motif_df$motif_name #>     tf_targets <- list() #>     n_targets <- list() #>     for (cur_tf in tfs) { #>         tf_targets[[cur_tf]] <- names(tf_match[, cur_tf][tf_match[,  #>             cur_tf]]) #>         n_targets[[cur_tf]] <- length(tf_targets[[cur_tf]]) #>     } #>     n_targets <- unlist(n_targets) #>     motif_df$n_targets <- n_targets #>     seurat_obj <- SetMotifMatrix(seurat_obj, tf_match) #>     seurat_obj <- SetMotifs(seurat_obj, motif_df) #>     seurat_obj <- SetMotifTargets(seurat_obj, tf_targets) #>     seurat_obj <- SetPFMList(seurat_obj, pfm) #>     seurat_obj #> } #> <bytecode: 0x7fbd59e88b38> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifTargetScore.html","id":null,"dir":"Reference","previous_headings":"","what":"MotifTargetScore — MotifTargetScore","title":"MotifTargetScore — MotifTargetScore","text":"Computes gene expression scores TF Motif target genes based MotifScan.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifTargetScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MotifTargetScore — MotifTargetScore","text":"","code":"MotifTargetScore(   seurat_obj,   method = \"Seurat\",   wgcna_genes = TRUE,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifTargetScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MotifTargetScore — MotifTargetScore","text":"seurat_obj Seurat object method Seurat UCell?","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/MotifTargetScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MotifTargetScore — MotifTargetScore","text":"","code":"MotifTargetScore(pbmc) #> Error in MotifTargetScore(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/NormalizeMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"NormalizeMetacells — NormalizeMetacells","title":"NormalizeMetacells — NormalizeMetacells","text":"Wrapper function run Seurat's NormalizeData function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/NormalizeMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NormalizeMetacells — NormalizeMetacells","text":"","code":"NormalizeMetacells(seurat_obj, wgcna_name = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/NormalizeMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NormalizeMetacells — NormalizeMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/NormalizeMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NormalizeMetacells — NormalizeMetacells","text":"","code":"NormalizeMetadata #> Error in eval(expr, envir, enclos): object 'NormalizeMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapBarPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the results from OverlapModulesDEGs as a bar plot — OverlapBarPlot","title":"Plots the results from OverlapModulesDEGs as a bar plot — OverlapBarPlot","text":"Plots results OverlapModulesDEGs bar plot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapBarPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the results from OverlapModulesDEGs as a bar plot — OverlapBarPlot","text":"","code":"OverlapBarPlot(   overlap_df,   plot_var = \"odds_ratio\",   logscale = TRUE,   neglog = FALSE,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapBarPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the results from OverlapModulesDEGs as a bar plot — OverlapBarPlot","text":"seurat_obj Seurat object dbs List EnrichR databases max_genes Max number genes include per module, ranked kME. wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapBarPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the results from OverlapModulesDEGs as a bar plot — OverlapBarPlot","text":"","code":"OverlapBarPlot #> function (overlap_df, plot_var = \"odds_ratio\", logscale = TRUE,  #>     neglog = FALSE, ...)  #> { #>     label <- plot_var #>     if (plot_var == \"odds_ratio\") { #>         yint <- 1 #>     } #>     else if (plot_var == \"fdr\") { #>         yint <- 0.05 #>     } #>     if (logscale) { #>         overlap_df[[plot_var]] <- log(overlap_df[[plot_var]]) #>         label <- paste0(\"log(\", plot_var, \")\") #>         yint = log(yint) #>     } #>     if (neglog) { #>         overlap_df[[plot_var]] <- -1 * overlap_df[[plot_var]] #>         label <- paste0(\"-\", label) #>         yint = -1 * yint #>     } #>     groups <- overlap_df$group %>% as.character %>% unique #>     plot_list <- list() #>     for (cur_group in groups) { #>         cur_df <- overlap_df %>% subset(group == cur_group) #>         p <- cur_df %>% ggplot(aes(x = reorder(module, get(plot_var)),  #>             y = get(plot_var))) + geom_bar(stat = \"identity\",  #>             fill = cur_df$color) + coord_flip() + xlab(\"\") +  #>             ylab(label) + ggtitle(cur_group) + theme(axis.line.y = element_blank(),  #>             axis.ticks.y = element_blank(), axis.text.y = element_blank(),  #>             plot.title = element_text(hjust = 0.5)) #>         if (plot_var == \"fdr\" | plot_var == \"odds_ratio\") { #>             p <- p + geom_hline(yintercept = yint, linetype = \"dashed\",  #>                 color = \"gray\") #>         } #>         plot_list[[cur_group]] <- p #>     } #>     plot_list #> } #> <bytecode: 0x7fbd533d7dc8> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapDotPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"OverlapDotPlot — OverlapDotPlot","title":"OverlapDotPlot — OverlapDotPlot","text":"Makes barplots Enrichr data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapDotPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OverlapDotPlot — OverlapDotPlot","text":"","code":"OverlapDotPlot(   overlap_df,   plot_var = \"odds_ratio\",   logscale = TRUE,   neglog = FALSE,   plot_significance = TRUE,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapDotPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OverlapDotPlot — OverlapDotPlot","text":"seurat_obj Seurat object dbs List EnrichR databases max_genes Max number genes include per module, ranked kME. wgcna_name name scWGCNA experiment seurat_obj@misc slot","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapDotPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OverlapDotPlot — OverlapDotPlot","text":"","code":"OverlapDotPlot #> function (overlap_df, plot_var = \"odds_ratio\", logscale = TRUE,  #>     neglog = FALSE, plot_significance = TRUE, ...)  #> { #>     label <- plot_var #>     if (logscale) { #>         overlap_df[[plot_var]] <- log(overlap_df[[plot_var]]) #>         label <- paste0(\"log(\", plot_var, \")\") #>     } #>     if (neglog) { #>         overlap_df[[plot_var]] <- -1 * overlap_df[[plot_var]] #>         label <- paste0(\"-\", label) #>     } #>     p <- overlap_df %>% ggplot(aes(x = module, y = group)) +  #>         geom_point(aes(size = get(plot_var), alpha = get(plot_var)),  #>             color = overlap_df$color) + RotatedAxis() + ylab(\"\") +  #>         xlab(\"\") + labs(size = label, alpha = label) + theme(plot.title = element_text(hjust = 0.5),  #>         axis.line.x = element_blank(), axis.line.y = element_blank(),  #>         panel.border = element_rect(colour = \"black\", fill = NA,  #>             size = 1)) #>     if (plot_significance) { #>         p <- p + geom_text(aes(label = Significance)) #>     } #>     p #> } #> <bytecode: 0x7fbd589d6390> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesDEGs.html","id":null,"dir":"Reference","previous_headings":"","what":"OverlapModulesDEGs — OverlapModulesDEGs","title":"OverlapModulesDEGs — OverlapModulesDEGs","text":"Computes intramodular connectivity (kME) based module eigengenes.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesDEGs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OverlapModulesDEGs — OverlapModulesDEGs","text":"","code":"OverlapModulesDEGs(seurat_obj, deg_df, wgcna_name = NULL, fc_cutoff = 0.5, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesDEGs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OverlapModulesDEGs — OverlapModulesDEGs","text":"seurat_obj Seurat object dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesDEGs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OverlapModulesDEGs — OverlapModulesDEGs","text":"","code":"OverlapModulesDEGs #> function (seurat_obj, deg_df, wgcna_name = NULL, fc_cutoff = 0.5,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     cell_groups <- deg_df$group %>% unique #>     modules <- GetModules(seurat_obj) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     if (fc_cutoff >= 0) { #>         deg_df <- subset(deg_df, avg_log2FC >= fc_cutoff) #>     } #>     else { #>         deg_df <- subset(deg_df, avg_log2FC <= fc_cutoff) #>         deg_df$avg_log2FC <- -1 * deg_df$avg_log2FC #>         fc_cutoff <- -1 * fc_cutoff #>     } #>     genome.size <- nrow(seurat_obj) #>     overlap_df <- do.call(rbind, lapply(mods, function(cur_mod) { #>         cur_module_genes <- modules %>% subset(module == cur_mod) %>%  #>             .$gene_name #>         cur_overlap_df <- do.call(rbind, lapply(cell_groups,  #>             function(cur_group) { #>                 cur_DEGs <- deg_df %>% subset(group == cur_group &  #>                   p_val_adj <= 0.05 & avg_log2FC > fc_cutoff) %>%  #>                   .$gene #>                 cur_overlap <- testGeneOverlap(newGeneOverlap(cur_module_genes,  #>                   cur_DEGs, genome.size = genome.size)) #>                 c(cur_overlap@odds.ratio, cur_overlap@pval, cur_overlap@Jaccard,  #>                   length(cur_overlap@intersection)) #>             })) %>% as.data.frame #>         colnames(cur_overlap_df) <- c(\"odds_ratio\", \"pval\", \"Jaccard\",  #>             \"size_intersection\") #>         cur_overlap_df$module <- cur_mod #>         cur_overlap_df$group <- cell_groups #>         cur_overlap_df$color <- modules %>% subset(module ==  #>             cur_mod) %>% .$color %>% unique #>         cur_overlap_df #>     })) #>     overlap_df$fdr <- p.adjust(overlap_df$pval, method = \"fdr\") #>     overlap_df$Significance <- gtools::stars.pval(overlap_df$fdr) #>     overlap_df$Significance <- ifelse(overlap_df$Significance ==  #>         \".\", \"\", overlap_df$Significance) #>     overlap_df$module <- factor(overlap_df$module, levels = mods) #>     overlap_df <- overlap_df %>% dplyr::select(c(module, group,  #>         color, odds_ratio, pval, fdr, Significance, Jaccard,  #>         size_intersection)) #>     overlap_df #> } #> <bytecode: 0x7fbd5a929040> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesMotifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlap modules with TF target genes — OverlapModulesMotifs","title":"Overlap modules with TF target genes — OverlapModulesMotifs","text":"Overlap modules TF target genes","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesMotifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlap modules with TF target genes — OverlapModulesMotifs","text":"","code":"OverlapModulesMotifs(seurat_obj, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesMotifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlap modules with TF target genes — OverlapModulesMotifs","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/OverlapModulesMotifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlap modules with TF target genes — OverlapModulesMotifs","text":"","code":"OverlapModulesDEGs #> function (seurat_obj, deg_df, wgcna_name = NULL, fc_cutoff = 0.5,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     cell_groups <- deg_df$group %>% unique #>     modules <- GetModules(seurat_obj) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     if (fc_cutoff >= 0) { #>         deg_df <- subset(deg_df, avg_log2FC >= fc_cutoff) #>     } #>     else { #>         deg_df <- subset(deg_df, avg_log2FC <= fc_cutoff) #>         deg_df$avg_log2FC <- -1 * deg_df$avg_log2FC #>         fc_cutoff <- -1 * fc_cutoff #>     } #>     genome.size <- nrow(seurat_obj) #>     overlap_df <- do.call(rbind, lapply(mods, function(cur_mod) { #>         cur_module_genes <- modules %>% subset(module == cur_mod) %>%  #>             .$gene_name #>         cur_overlap_df <- do.call(rbind, lapply(cell_groups,  #>             function(cur_group) { #>                 cur_DEGs <- deg_df %>% subset(group == cur_group &  #>                   p_val_adj <= 0.05 & avg_log2FC > fc_cutoff) %>%  #>                   .$gene #>                 cur_overlap <- testGeneOverlap(newGeneOverlap(cur_module_genes,  #>                   cur_DEGs, genome.size = genome.size)) #>                 c(cur_overlap@odds.ratio, cur_overlap@pval, cur_overlap@Jaccard,  #>                   length(cur_overlap@intersection)) #>             })) %>% as.data.frame #>         colnames(cur_overlap_df) <- c(\"odds_ratio\", \"pval\", \"Jaccard\",  #>             \"size_intersection\") #>         cur_overlap_df$module <- cur_mod #>         cur_overlap_df$group <- cell_groups #>         cur_overlap_df$color <- modules %>% subset(module ==  #>             cur_mod) %>% .$color %>% unique #>         cur_overlap_df #>     })) #>     overlap_df$fdr <- p.adjust(overlap_df$pval, method = \"fdr\") #>     overlap_df$Significance <- gtools::stars.pval(overlap_df$fdr) #>     overlap_df$Significance <- ifelse(overlap_df$Significance ==  #>         \".\", \"\", overlap_df$Significance) #>     overlap_df$module <- factor(overlap_df$module, levels = mods) #>     overlap_df <- overlap_df %>% dplyr::select(c(module, group,  #>         color, odds_ratio, pval, fdr, Significance, Jaccard,  #>         size_intersection)) #>     overlap_df #> } #> <bytecode: 0x7fbd5a929040> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/PlotDendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"PlotDendrogram — PlotDendrogram","title":"PlotDendrogram — PlotDendrogram","text":"Plot WGCNA dendrogram","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/PlotDendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlotDendrogram — PlotDendrogram","text":"","code":"PlotDendrogram(   seurat_obj,   groupLabels = \"Module colors\",   wgcna_name = NULL,   dendroLabels = FALSE,   hang = 0.03,   addGuide = TRUE,   guideHang = 0.05,   main = \"\",   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/PlotDendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlotDendrogram — PlotDendrogram","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/PlotDendrogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PlotDendrogram — PlotDendrogram","text":"","code":"PlotDendrogram #> function (seurat_obj, groupLabels = \"Module colors\", wgcna_name = NULL,  #>     dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05,  #>     main = \"\", ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     net <- GetNetworkData(seurat_obj, wgcna_name) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     WGCNA::plotDendroAndColors(net$dendrograms[[1]], as.character(modules$color),  #>         groupLabels = groupLabels, dendroLabels = dendroLabels,  #>         hang = hang, addGuide = addGuide, guideHang = guideHang,  #>         main = main, ...) #> } #> <bytecode: 0x7fbd573a9a80> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ProjectModules.html","id":null,"dir":"Reference","previous_headings":"","what":"ProjectModules — ProjectModules","title":"ProjectModules — ProjectModules","text":"Computes intramodular connectivity (kME) based module eigengenes.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ProjectModules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ProjectModules — ProjectModules","text":"","code":"ProjectModules(   seurat_obj,   seurat_ref,   group.by.vars = NULL,   gene_mapping = NULL,   genome1_col = NULL,   genome2_col = NULL,   scale_genes = FALSE,   wgcna_name = NULL,   wgcna_name_proj = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/ProjectModules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProjectModules — ProjectModules","text":"seurat_obj Seurat object dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ProjectModules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ProjectModules — ProjectModules","text":"","code":"ProjectModules #> function (seurat_obj, seurat_ref, group.by.vars = NULL, gene_mapping = NULL,  #>     genome1_col = NULL, genome2_col = NULL, scale_genes = FALSE,  #>     wgcna_name = NULL, wgcna_name_proj = NULL, ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_ref@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_ref, wgcna_name) #>     if (!is.null(gene_mapping)) { #>         modules <- TransferModuleGenome(modules, gene_mapping,  #>             genome1_col, genome2_col) #>     } #>     gene_names <- modules$gene_name #>     genes_use <- intersect(gene_names, rownames(seurat_obj)) #>     print(\"n genes:\") #>     print(length(genes_use)) #>     modules <- modules %>% subset(gene_name %in% genes_use) #>     if (!(wgcna_name_proj %in% names(seurat_obj@misc))) { #>         seurat_obj <- SetupForWGCNA(seurat_obj, wgcna_name = wgcna_name_proj,  #>             features = genes_use) #>     } #>     if (!scale_genes & sum(genes_use %in% rownames(GetAssayData(seurat_obj,  #>         slot = \"scale.data\"))) == length(genes_use)) { #>         print(\"Scaling already done.\") #>     } #>     else if (scale_genes) { #>         print(\"Scaling dataset...\") #>         seurat_obj <- Seurat::ScaleData(seurat_obj, features = genes_use,  #>             ...) #>     } #>     seurat_obj <- ModuleEigengenes(seurat_obj, group.by.vars = group.by.vars,  #>         modules = modules, wgcna_name = wgcna_name_proj, ...) #>     seurat_obj #> } #> <bytecode: 0x7fbd57670dd8> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/ROCCurves.html","id":null,"dir":"Reference","previous_headings":"","what":"ROCCurves — ROCCurves","title":"ROCCurves — ROCCurves","text":"Makes barplots Enrichr data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ROCCurves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROCCurves — ROCCurves","text":"","code":"ROCCurves(seurat_obj, roc_df = NULL, conf_df = NULL, wgcna_name = NULL)"},{"path":"https://smorabit.github.io/scWGCNA/reference/ROCCurves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROCCurves — ROCCurves","text":"seurat_obj Seurat object wgcna_name name scWGCNA experiment seurat_obj@misc slot dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ROCCurves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROCCurves — ROCCurves","text":"","code":"ROCCurves #> function (seurat_obj, roc_df = NULL, conf_df = NULL, wgcna_name = NULL)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_obj) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     mod_colors <- modules %>% subset(module %in% mods) %>% select(c(module,  #>         color)) %>% distinct %>% arrange(module) %>% .$color #>     if (is.null(roc_df) | is.null(conf_df)) { #>         roc_df <- GetROCData(seurat_obj, wgcna_name)$roc #>         conf_df <- GetROCData(seurat_obj, wgcna_name)$conf #>     } #>     roc_df <- roc_df %>% group_by(module) %>% arrange(sensitivity) #>     conf_df <- conf_df %>% group_by(module) %>% arrange(sensitivity) #>     auc_df <- distinct(roc_df[, c(\"module\", \"auc\")]) #>     roc_df$module <- factor(as.character(roc_df$module), levels = mods) #>     conf_df$module <- factor(as.character(conf_df$module), levels = mods) #>     auc_df$module <- factor(as.character(auc_df$module), levels = mods) #>     p <- roc_df %>% ggplot(aes(x = specificity, y = sensitivity,  #>         color = module, fill = module), ) + geom_line() + geom_ribbon(data = conf_df,  #>         aes(x = sensitivity, ymin = lo, ymax = hi, fill = module),  #>         inherit.aes = FALSE, alpha = 0.4) + scale_color_manual(values = unlist(mod_colors)) +  #>         scale_fill_manual(values = unlist(mod_colors)) + scale_x_continuous(breaks = c(0,  #>         0.5, 1), labels = c(\"0\", \"0.5\", \"1\")) + scale_y_continuous(breaks = c(0,  #>         0.5, 1), labels = c(\"0\", \"0.5\", \"1\")) + xlab(\"1 - Specificity (FPR)\") +  #>         ylab(\"Sensitivity (TPR)\") + geom_text(data = auc_df,  #>         aes(color = module), x = 0.75, y = 0.1, label = paste0(\"AUC: \",  #>             format(auc_df$auc, digits = 2)), inherit.aes = FALSE,  #>         size = 4, color = \"black\") #>     p #> } #> <bytecode: 0x7fbd59d94e10> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunEnrichr.html","id":null,"dir":"Reference","previous_headings":"","what":"RunEnrichr — RunEnrichr","title":"RunEnrichr — RunEnrichr","text":"Computes intramodular connectivity (kME) based module eigengenes.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunEnrichr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunEnrichr — RunEnrichr","text":"","code":"RunEnrichr(   seurat_obj,   dbs = c(\"GO_Biological_Process_2021\", \"GO_Cellular_Component_2021\",     \"GO_Molecular_Function_2021\"),   max_genes = 100,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunEnrichr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunEnrichr — RunEnrichr","text":"seurat_obj Seurat object dbs List EnrichR databases max_genes Max number genes include per module, ranked kME.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunEnrichr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunEnrichr — RunEnrichr","text":"","code":"RunEnrichr #> function (seurat_obj, dbs = c(\"GO_Biological_Process_2021\", \"GO_Cellular_Component_2021\",  #>     \"GO_Molecular_Function_2021\"), max_genes = 100, wgcna_name = NULL,  #>     ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     mods <- mods[mods != \"grey\"] #>     combined_output <- data.frame() #>     for (i in 1:length(mods)) { #>         cur_mod <- mods[i] #>         cur_info <- subset(modules, module == cur_mod) #>         cur_info <- cur_info[, c(\"gene_name\", paste0(\"kME_\",  #>             cur_mod))] #>         cur_genes <- top_n(cur_info, max_genes) %>% .$gene_name %>%  #>             as.character #>         enriched <- enrichR::enrichr(cur_genes, dbs) #>         for (db in names(enriched)) { #>             cur_df <- enriched[[db]] #>             if (nrow(cur_df) > 1) { #>                 cur_df$db <- db #>                 cur_df$module <- cur_mod #>                 combined_output <- rbind(combined_output, cur_df) #>             } #>         } #>     } #>     seurat_obj <- SetEnrichrTable(seurat_obj, combined_output,  #>         wgcna_name) #>     seurat_obj #> } #> <bytecode: 0x7fbd599d15f0> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunHarmonyMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"RunHarmonyMetacells — RunHarmonyMetacells","title":"RunHarmonyMetacells — RunHarmonyMetacells","text":"Wrapper function run harmony's RunHarmony function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunHarmonyMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunHarmonyMetacells — RunHarmonyMetacells","text":"","code":"RunHarmonyMetacells(seurat_obj, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunHarmonyMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunHarmonyMetacells — RunHarmonyMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunHarmonyMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunHarmonyMetacells — RunHarmonyMetacells","text":"","code":"NormalizeMetadata #> Error in eval(expr, envir, enclos): object 'NormalizeMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunModuleUMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP on co-expression matrix using hub genes as features. — RunModuleUMAP","title":"Run UMAP on co-expression matrix using hub genes as features. — RunModuleUMAP","text":"Run UMAP co-expression matrix using hub genes features.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunModuleUMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP on co-expression matrix using hub genes as features. — RunModuleUMAP","text":"","code":"RunModuleUMAP(   seurat_obj,   n_hubs = 50,   exclude_grey = TRUE,   harmonized = TRUE,   wgcna_name = NULL,   n_neighbors = 25,   metric = \"cosine\",   spread = 1,   min_dist = 0.4,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunModuleUMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP on co-expression matrix using hub genes as features. — RunModuleUMAP","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunModuleUMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run UMAP on co-expression matrix using hub genes as features. — RunModuleUMAP","text":"","code":"RunModuleUMAP #> function (seurat_obj, n_hubs = 50, exclude_grey = TRUE, harmonized = TRUE,  #>     wgcna_name = NULL, n_neighbors = 25, metric = \"cosine\", spread = 1,  #>     min_dist = 0.4, ...)  #> { #>     if (is.null(wgcna_name)) { #>         wgcna_name <- seurat_obj@misc$active_wgcna #>     } #>     TOM <- GetTOM(seurat_obj, wgcna_name) #>     MEs <- GetMEs(seurat_obj, harmonized, wgcna_name) #>     modules <- GetModules(seurat_obj, wgcna_name) #>     mods <- levels(modules$module) #>     if (exclude_grey) { #>         mods <- mods[mods != \"grey\"] #>     } #>     hub_list <- lapply(mods, function(cur_mod) { #>         cur <- subset(modules, module == cur_mod) #>         cur[, c(\"gene_name\", paste0(\"kME_\", cur_mod))] %>% top_n(n_hubs) %>%  #>             .$gene_name #>     }) #>     names(hub_list) <- mods #>     selected_genes <- modules[modules$module %in% mods, \"gene_name\"] #>     umap_TOM <- TOM[selected_genes, unlist(hub_list)] #>     hub_umap <- uwot::umap(X = umap_TOM, min_dist = min_dist,  #>         n_neighbors = n_neighbors, metric = metric, spread = spread,  #>         ...) #>     plot_df <- as.data.frame(hub_umap) #>     colnames(plot_df) <- c(\"UMAP1\", \"UMAP2\") #>     plot_df$gene <- rownames(umap_TOM) #>     ix <- match(plot_df$gene, modules$gene_name) #>     plot_df$module <- modules$module[ix] #>     plot_df$color <- modules$color[ix] #>     plot_df$hub <- ifelse(plot_df$gene %in% as.character(unlist(hub_list)),  #>         \"hub\", \"other\") #>     kMEs <- do.call(rbind, lapply(mods, function(cur_mod) { #>         cur <- subset(modules, module == cur_mod) #>         cur <- cur[, c(\"gene_name\", paste0(\"kME_\", cur_mod))] #>         colnames(cur) <- c(\"gene_name\", \"kME\") #>         cur$kME <- scale01(cur$kME) #>         cur #>     })) #>     ix <- kMEs$gene_name[match(plot_df$gene, kMEs$gene_name)] #>     plot_df$kME <- kMEs[ix, \"kME\"] #>     seurat_obj <- SetModuleUMAP(seurat_obj, plot_df, wgcna_name) #>     seurat_obj #> } #> <bytecode: 0x7fbd5796ec38> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunPCAMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"RunPCAMetacells — RunPCAMetacells","title":"RunPCAMetacells — RunPCAMetacells","text":"Wrapper function run Seurat's RunPCA function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunPCAMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunPCAMetacells — RunPCAMetacells","text":"","code":"RunPCAMetacells(seurat_obj, wgcna_name = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunPCAMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunPCAMetacells — RunPCAMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunPCAMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunPCAMetacells — RunPCAMetacells","text":"","code":"NormalizeMetadata #> Error in eval(expr, envir, enclos): object 'NormalizeMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunUMAPMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"RunUMAPMetacells — RunUMAPMetacells","title":"RunUMAPMetacells — RunUMAPMetacells","text":"Wrapper function run Seurat's RunUMAP function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunUMAPMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RunUMAPMetacells — RunUMAPMetacells","text":"","code":"RunUMAPMetacells(seurat_obj, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/RunUMAPMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RunUMAPMetacells — RunUMAPMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/RunUMAPMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RunUMAPMetacells — RunUMAPMetacells","text":"","code":"NormalizeMetadata #> Error in eval(expr, envir, enclos): object 'NormalizeMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/ScaleMetacells.html","id":null,"dir":"Reference","previous_headings":"","what":"ScaleMetacells — ScaleMetacells","title":"ScaleMetacells — ScaleMetacells","text":"Wrapper function run Seurat's ScaleData function metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ScaleMetacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ScaleMetacells — ScaleMetacells","text":"","code":"ScaleMetacells(seurat_obj, wgcna_name = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/ScaleMetacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ScaleMetacells — ScaleMetacells","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/ScaleMetacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ScaleMetacells — ScaleMetacells","text":"","code":"ScaleMetadata #> Error in eval(expr, envir, enclos): object 'ScaleMetadata' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/SelectNetworkGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"SelectNetworkGenes — SelectNetworkGenes","title":"SelectNetworkGenes — SelectNetworkGenes","text":"function neighboring cells provided groupings, cluster cell type.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SelectNetworkGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SelectNetworkGenes — SelectNetworkGenes","text":"","code":"SelectNetworkGenes(   seurat_obj,   gene_select = \"variable\",   fraction = 0.05,   n_chunks = 5,   group.by = NULL,   gene_list = NULL,   wgcna_name = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/SelectNetworkGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SelectNetworkGenes — SelectNetworkGenes","text":"seurat_obj Seurat object fraction numeric determines minimum cells gene must expressed order included. example, fraction = 0.05 means 5% cells must express gene (count > 0) included. gene_list character string gene names, used type = \"custom\" type select genes? Select \"variable\", \"fraction\", \"\", \"custom\".","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SelectNetworkGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SelectNetworkGenes — SelectNetworkGenes","text":"","code":"SelectNetworkGenes(pbmc) #> Error in VariableFeatures(seurat_obj): could not find function \"VariableFeatures\""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetDatExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"spr — SetDatExpr","title":"spr — SetDatExpr","text":"function sets expression matrix metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetDatExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spr — SetDatExpr","text":"","code":"SetDatExpr(   seurat_obj,   group_name,   use_metacells = TRUE,   group.by = NULL,   multi.group.by = NULL,   multi_group_name = NULL,   return_seurat = TRUE,   wgcna_name = NULL,   slot = \"data\",   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/SetDatExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spr — SetDatExpr","text":"seurat_obj Seurat object group_name string containing group present provided group.column Seurat Idents. use_metacells logical determining use metacells (TRUE) full expression matrix (FALSE) group.string containing name column Seurat object cell groups (clusters, cell types, etc). NULL (default), scWGCNA uses Seurat Idents group. multi.group.string containing name column Seurat object groups consensus WGCNA (dataset, sample, condition, etc) multi_group_name string containing name group present multi.group.column. wgcna_name string containing name WGCNA slot seurat_obj@misc. Default = NULL retrieves currently active WGCNA data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetDatExpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"spr — SetDatExpr","text":"","code":"SetDatExpr(pbmc) #> Error in SetDatExpr(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/SetMultiExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"SetMultiExpr — SetMultiExpr","title":"SetMultiExpr — SetMultiExpr","text":"function sets expression matrix input consensus WGCNA based metacell expression matrix, full expression matrix.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetMultiExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SetMultiExpr — SetMultiExpr","text":"","code":"SetMultiExpr(   seurat_obj,   group_name,   use_metacells = TRUE,   group.by = NULL,   multi.group.by = NULL,   multi_groups = NULL,   wgcna_name = NULL,   ... )"},{"path":"https://smorabit.github.io/scWGCNA/reference/SetMultiExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SetMultiExpr — SetMultiExpr","text":"seurat_obj Seurat object group_name string containing group present provided group.column Seurat Idents. use_metacells logical determining use metacells (TRUE) full expression matrix (FALSE) group.string containing name column Seurat object cell groups (clusters, cell types, etc). NULL (default), scWGCNA uses Seurat Idents group. multi.group.string containing name column Seurat object groups consensus WGCNA (dataset, sample, condition, etc) multi_groups character vecrtor containing names wgcna_name string containing name WGCNA slot seurat_obj@misc. Default = NULL retrieves currently active WGCNA data","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetMultiExpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SetMultiExpr — SetMultiExpr","text":"","code":"SetDatExpr(pbmc) #> Error in SetDatExpr(pbmc): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/SetupForWGCNA.html","id":null,"dir":"Reference","previous_headings":"","what":"SetupForWGCNA — SetupForWGCNA","title":"SetupForWGCNA — SetupForWGCNA","text":"function gets expression matrix metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetupForWGCNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SetupForWGCNA — SetupForWGCNA","text":"","code":"SetupForWGCNA(seurat_obj, wgcna_name, group = NULL, features = NULL, ...)"},{"path":"https://smorabit.github.io/scWGCNA/reference/SetupForWGCNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SetupForWGCNA — SetupForWGCNA","text":"seurat_obj Seurat object","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/SetupForWGCNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SetupForWGCNA — SetupForWGCNA","text":"","code":"SetupForWGCNA(pbmc) #> Error in SetActiveWGCNA(seurat_obj, wgcna_name): argument \"wgcna_name\" is missing, with no default"},{"path":"https://smorabit.github.io/scWGCNA/reference/TestSoftPowers.html","id":null,"dir":"Reference","previous_headings":"","what":"TestSoftPowers — TestSoftPowers","title":"TestSoftPowers — TestSoftPowers","text":"function gets expression matrix metacell object.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/TestSoftPowers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TestSoftPowers — TestSoftPowers","text":"","code":"TestSoftPowers(   seurat_obj,   use_metacells = TRUE,   group.by = NULL,   group_name = NULL,   setDatExpr = TRUE,   powers = c(seq(1, 10, by = 1), seq(12, 30, by = 2)),   make_plot = TRUE,   outfile = \"softpower.pdf\",   figsize = c(7, 7) )"},{"path":"https://smorabit.github.io/scWGCNA/reference/TestSoftPowers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TestSoftPowers — TestSoftPowers","text":"seurat_obj Seurat object outfile filepath output pdf generated. Default figsize numeric determining height width output figure. Default c(7,7)","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/TestSoftPowers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TestSoftPowers — TestSoftPowers","text":"","code":"TestSoftPowers(pbmc) #> Error in GetActiveWGCNA(seurat_obj): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/TransferModuleGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"TransferModuleGenome — TransferModuleGenome","title":"TransferModuleGenome — TransferModuleGenome","text":"Takes module table gene mapping table (like biomart) gene names two genomes order switch","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/TransferModuleGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TransferModuleGenome — TransferModuleGenome","text":"","code":"TransferModuleGenome(   modules,   gene_mapping,   genome1_col = NULL,   genome2_col = NULL )"},{"path":"https://smorabit.github.io/scWGCNA/reference/TransferModuleGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TransferModuleGenome — TransferModuleGenome","text":"modules module table GetModules function gene_mapping table gene names genomes genome1_col column gene_mapping gene names genome currently present modules genome2_col column gene_mapping gene names genome transfer ","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/TransferModuleGenome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TransferModuleGenome — TransferModuleGenome","text":"","code":"TransferModuleGenome #> function (modules, gene_mapping, genome1_col = NULL, genome2_col = NULL)  #> { #>     if (is.null(genome1_col)) { #>         genome1_col <- colnames(gene_mapping)[1] #>     } #>     if (is.null(genome2_col)) { #>         genome2_col <- colnames(gene_mapping)[2] #>     } #>     gene_mapping <- gene_mapping[, c(genome1_col, genome2_col)] #>     gene_list <- modules$gene_name #>     gene_mapping <- gene_mapping[gene_mapping[, genome1_col] %in%  #>         gene_list, ] #>     modules <- subset(modules, gene_name %in% gene_mapping[,  #>         genome1_col]) #>     print(\"here\") #>     gene_match <- match(gene_list, gene_mapping[, genome1_col]) #>     gene_mapping <- na.omit(gene_mapping[gene_match, ]) #>     print(\"here\") #>     print(dim(modules)) #>     print(dim(gene_mapping)) #>     print(length(gene_match)) #>     modules$gene_name <- gene_mapping[, genome2_col] #>     modules #> } #> <bytecode: 0x7fbd54ebbdb8> #> <environment: namespace:scWGCNA>"},{"path":"https://smorabit.github.io/scWGCNA/reference/construct_metacells.html","id":null,"dir":"Reference","previous_headings":"","what":"construct_metacells — construct_metacells","title":"construct_metacells — construct_metacells","text":"function takes Seurat object constructs averaged 'metacells' based neighboring cells.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/construct_metacells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct_metacells — construct_metacells","text":"","code":"construct_metacells(   seurat_obj,   name = \"agg\",   k = 50,   reduction = \"umap\",   assay = \"RNA\",   slot = \"data\" )"},{"path":"https://smorabit.github.io/scWGCNA/reference/construct_metacells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct_metacells — construct_metacells","text":"seurat_obj Seurat object name string appended resulting metalcells. Default = 'agg' k Number nearest neighbors aggregate. Default = 50 reduction dimensionality reduction stored Seurat object. Default = 'umap' assay Assay extract data aggregation. Default = 'RNA' slot Slot extract data aggregation. Default = 'data'","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/construct_metacells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"construct_metacells — construct_metacells","text":"","code":"construct_metacells(pbmc) #> Error in as.data.frame(seurat_obj@reductions[[reduction]]@cell.embeddings): object 'pbmc' not found"},{"path":"https://smorabit.github.io/scWGCNA/reference/metacells_by_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"metacells_by_groups — metacells_by_groups","title":"metacells_by_groups — metacells_by_groups","text":"function takes Seurat object constructs averaged 'metacells' based neighboring cells provided groupings, cluster cell type.","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/metacells_by_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"metacells_by_groups — metacells_by_groups","text":"","code":"metacells_by_groups(   seurat_obj,   group.by = c(\"seurat_clusters\"),   k = 50,   reduction = \"umap\",   assay = \"RNA\",   slot = \"data\" )"},{"path":"https://smorabit.github.io/scWGCNA/reference/metacells_by_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"metacells_by_groups — metacells_by_groups","text":"seurat_obj Seurat object group.character vector Seurat metadata column names representing groups metacells computed. Default = 'seurat_clusters' k Number nearest neighbors aggregate. Default = 50 reduction dimensionality reduction stored Seurat object. Default = 'umap' assay Assay extract data aggregation. Default = 'RNA' slot Slot extract data aggregation. Default = 'data' name string appended resulting metalcells. Default = 'agg'","code":""},{"path":"https://smorabit.github.io/scWGCNA/reference/metacells_by_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"metacells_by_groups — metacells_by_groups","text":"","code":"metacells_by_groups(pbmc) #> Error in metacells_by_groups(pbmc): object 'pbmc' not found"}]
